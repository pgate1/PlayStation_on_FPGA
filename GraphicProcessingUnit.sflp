/*
	GPU top
		by pgate1
*/

%i "drawFillRect.h"
%i "drawPoly.h"
%i "drawRect.h"

circuit GraphicProcessingUnit
{
	input din<32>;
	output dout<32>;
	reg_wr dout_reg<32>;
	instrout read_ack;

	instrin read_status;
	instrin write_status(din);

	instrin WriteData(din), ReadData;
	instrin vblank_begin, vblank_end, hsync;

	reg_ws reset;

	reg_wr GPUdataRet<32>;

	reg_wr status_mask_bits<2>; // bit 12:11
	reg_wr status_reverse_flag; // bit 14
	reg_wr status_horizontal_resolution2; // bit 16
	reg_wr status_horizontal_resolution1<2>; // bit 18:17
	reg_wr status_vertical_resolution; // bit 19
	reg_wr status_video_mode; // bit 20
	reg_wr status_color_depth; // bit 21
	reg_wr status_interlace; // bit 22
	reg_ws status_display_disable; // bit 23
//	sel status_data_request; // bit 25
//	sel status_ready_recieve_cmd; // bit 26 0=No, 1=Ready
	reg_wr status_ready_send_vramtocpu; // bit 27 0=No, 1=Ready
	input busy_recieve_dmablock; // bit 28 0=No, 1=busy
	reg_wr status_dma_direction<2>; // bit 30-29 0=Off, 1=?, 2=CPUtoGP0, 3=GPUtoCPU
	reg_wr status_drawing_evenodd; // bit 31 0=Even or Vblank, 1=Odd

	reg_wr vblank;

	reg_wr DispStartX<10>, DispStartY<9>;
	reg_wr DispStartX_pre<10>, DispStartY_pre<9>;
//	reg_wr HorDispRangeStart<12>, HorDispRangeEnd<12>;
//	reg_wr VertDispRangeStart<10>, VertDispRangeEnd<10>;

	reg_wr dispWidth<10>, dispHeight<9>; // W640<10>,H480<9>

	reg_wr VramPosX<16>, VramPosY<16>;
	reg_wr drawX<10>, drawY<10>, drawW<10>, drawH<10>;
	reg_wr drawOffsetX<11>, drawOffsetY<11>;
	mem CommandBuffer[16]<32>;
	reg_wr BufferOffset<4>;
	reg_wr cmd_reg<8>;
	reg reg_E2<32>;

	output busy, drawing, vram_busy;

	reg px1<11>, py1<11>, pc1<24>; // A点
	reg px2<11>, py2<11>, pc2<24>; // B点
	reg px3<11>, py3<11>, pc3<24>; // C点

	reg pu1<8>, pv1<8>;
	reg pu2<8>, pv2<8>;
	reg pu3<8>, pv3<8>;

	reg clut<16>, tpage<14>;

	drawFillRect fill;
	drawPoly poly;
	drawRect rect;

	instrin sw_outview_on, sw_view_half, sw_texture_off, sw_kernel_run;

	instrout view_on;
	output view_x<10>, view_y<9>;
	output view_R<8>, view_G<8>, view_B<8>;
	instrout fill_view_on;

	output dispW, dispH;

	// for VRAM
	output vram_write_adrs<19>, vram_write_data<16>;
	instrout vram_write_req(vram_write_adrs, vram_write_data);
	output vram_read_adrs<19>;
	instrout vram_read_req(vram_read_adrs);
	instrin vram_write_ack, vram_read_ack;
	input vram_read_data<16>;
	reg_wr vram_read_data_reg<16>;

	// WriteData用
	reg_wr io_write_data<32>;

	// WriteData,ReadData用
	sel io_vram_write_adrs<19>, io_vram_read_adrs<19>, io_vram_din<16>;
	reg_wr io_vram_write_adrs_reg<19>, io_vram_read_adrs_reg<19>, io_vram_din_reg<16>;
	instrself vram_write(io_vram_write_adrs, io_vram_din);
	instrself vram_read(io_vram_read_adrs);
	reg_wr vram_read_wait, vram_write_wait;

	instrin texture_full;
	instrout display_flip, draw_notdisp_side;

	instrself halt(halt_sel);
	sel halt_sel<8>;
	reg_wr halt_reg<8>;
	output halt_code<8>;

input dbg_in<16>;
output dbg<32>;
reg_wr dbg_reg<32>;
output dbg_gpu<32>;

	stage_name VramData_image { task read_vram(); task write_vram(io_write_data); }
	stage_name draw_stg { task do(); }

	instruct halt halt_reg := halt_sel;
	halt_code = halt_reg;

dbg = dbg_reg;

	if(reset){
		reset := 0b0;
	//	status := 0x14802000;

		status_drawing_evenodd := 0b0;
		status_dma_direction := 0b00;
		status_ready_send_vramtocpu := 0b0; // ok
	//	status_ready_recieve_cmd := 0b1; // sel
		status_display_disable := 0b1;
		status_interlace := 0b0;
		status_color_depth := 0b0;
		status_video_mode := 0b0;
		status_vertical_resolution := 0b0;
		status_horizontal_resolution1 := 0b00;
		status_horizontal_resolution2 := 0b0;
		status_reverse_flag := 0b0;
		status_mask_bits := 0b00;

		GPUdataRet := 0x00000400;
		BufferOffset := 0;
		drawX := 0;
		drawY := 0;
		drawW := 0;
		drawH := 0;
		VramPosX := 0;
		VramPosY := 0;
		dispWidth := 640;
		dispHeight := 480;
	//	DispStartX_pre := 320;
	//	DispStartY_pre := 240;
		DispStartX := 0;
		DispStartY := 0;
		drawOffsetX := 0;
		drawOffsetY := 0;
		tpage := 14#0b0;

		vblank := 0b1;
	}

	instruct write_status par{
//if(draw_stg.do) halt(0xAA);

		any{
			din<31:24>==0x00 : par{
				reset := 0b1;
			}
			din<31:24>==0x01 : par{
				BufferOffset := 0;
			}
			din<31:24>==0x02 : ; // reset irq
			din<31:24>==0x03 : par{
				// display enable
				status_display_disable :=  din<0>;
			}
			din<31:24>==0x04 : par{
				// DMA transfer mode
				status_dma_direction := din<1:0>;
			}
			din<31:24>==0x05 : par{
				DispStartX_pre := DispStartX;
				DispStartY_pre := DispStartY;
				DispStartX := din<9:0>;
				DispStartY := din<18:10>;
			//	if((DispStartX_pre!=DispStartX) | (DispStartY_pre!=DispStartY)){
					display_flip();
			//	}
			}
			din<31:24>==0x06 : par{
			//	HorDispRangeStart := din<11:0>;
			//	HorDispRangeEnd := din<23:12>;
			}
			din<31:24>==0x07 : par{
			//	VertDispRangeStart := din<9:0>;
			//	VertDispRangeEnd := din<19:10>;
			}
			din<31:24>==0x08 : par{
				switch(din<1:0>){
					case 0: dispWidth := 256;
					case 1: dispWidth := 320;
					case 2: dispWidth := 512;
					case 3: dispWidth := 640;
				}
				switch(din<2>){
					case 0: dispHeight := 240;
					case 1: dispHeight := 480;
				}
				status_horizontal_resolution1 := din<1:0>;
				status_vertical_resolution := din<2>;
				status_video_mode := din<3>;
				status_color_depth := din<4>;
				status_interlace := din<5>;
				status_horizontal_resolution2 := din<6>;
				status_reverse_flag := din<7>;
			}
			din<31:24>==0x10 : any{
				din<3:0>==0x2 : GPUdataRet := reg_E2;
				din<3:0>==0x3 : GPUdataRet := 12#0b0 || drawY || drawX;
				din<3:0>==0x4 : GPUdataRet := 12#0b0 || drawH || drawW;
				din<3:0>==0x5 : GPUdataRet := 10#0b0 || drawOffsetY || drawOffsetX;
				din<3:0>==0x7 : GPUdataRet := 2; // GPU Version
				din<3:0>==0x8 : GPUdataRet := 0;
				else : par{
dbg_reg := 0x0000000 || din<3:0>;
					halt(0xA1);
				}
			}
			else : halt(0xA2);
		}
	}

	dispW = (dispWidth==512) | (dispWidth==640);
	dispH = (dispHeight==480);

	instruct vblank_begin par{
		vblank := 0b1;
	}
	instruct vblank_end vblank := 0b0;
/*
	instruct hsync par{
		// mode interlace
		if(status<22>) status_drawing_evenodd := ^status_drawing_evenodd;
		else status_drawing_evenodd := 0b0;
	}
*/
	instruct read_status par{

		sel status_ready_recieve_cmd; // bit 26 0=No, 1=Ready
	//	status_ready_recieve_cmd = 0b1;
		status_ready_recieve_cmd = ^busy;

		sel status_data_request;
		switch(status_dma_direction){
			case 0: status_data_request = 0b0;
			case 1: status_data_request = BufferOffset==0;//busy_recieve_dmablock; // FIFO state 0:full, 1:not full
			case 2: status_data_request = BufferOffset==0;//busy_recieve_dmablock; // CPU->GP0
			case 3: status_data_request = status_ready_send_vramtocpu; // GPU->CPU
		}

		dout =
			(status_drawing_evenodd /*& ^vblank*/) || // bit 31
			status_dma_direction || // bit 30-29
			(BufferOffset==0) || // busy_recieve_dmablock || // bit 28
			status_ready_send_vramtocpu || // bit 27
			(status_ready_recieve_cmd & (^status_data_request | ^busy_recieve_dmablock)) || // bit 26
			status_data_request || // bit 25
			0b0 || // bit 24 Interrupt Request
			status_display_disable || // bit 23 Display Enable
			status_interlace || // bit 22 Vertical Interlace
			status_color_depth || // bit 21 Display Area Color Depth
			status_video_mode || // bit 20 Video Mode
			status_vertical_resolution || // bit 19 Vertical Resolution
			status_horizontal_resolution1 || // bit 17-18 Horizontal Resolution 1
			status_horizontal_resolution2 || // bit 16 Horizontal Resolution 2
			tpage<11>  || // bit 15 Texture Disable
			status_reverse_flag || // bit 14 Reverseflag
			0b1 || // bit 13 Interlace Field
			status_mask_bits || // bit 12:11 Set Mask-bit when drawing pixels
			tpage<10:0>;

		reg_wr count<2>;
		count++;
		if(/&count) status_drawing_evenodd := ^status_drawing_evenodd; // test
	}

	reg_wr ReadData_ack;
	instruct ReadData par{
		if(status_ready_send_vramtocpu){ // status<27>
//if(VramData_image.write_vram) halt(0xA4); // no
//if(WriteData) halt(0xA4); // no
//if(vram_write_req) halt(0xA4); // no
if(draw_stg.do) halt(0xA4);

			generate VramData_image.read_vram();
		}
		else{
			dout_reg := GPUdataRet;
			ReadData_ack := 0b1;
		}
	}
	if(ReadData_ack){
		read_ack();
		ReadData_ack := 0b0;
	}

	if(read_status);
	else dout = dout_reg; // DMA_Read_Data

	instruct WriteData par{

if(draw_stg.do) halt(0xA8);
if(BufferOffset==15) halt(0xA9);

		CommandBuffer[BufferOffset] := din;
		sel cmd<8>;
		if(BufferOffset==0){
			cmd = din<31:24>;
			cmd_reg := cmd;
		}
		else cmd = cmd_reg;

		any{
			(cmd==0x00) | (cmd==0x01) : ; // none

			(cmd==0x02) : any{
				BufferOffset==2 : par{ // FillFramebufferRect
					generate draw_stg.do();
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0x03) | 
			(cmd==0x04) | (cmd==0x05) | (cmd==0x06) | (cmd==0x07) |
			(cmd==0x08) | (cmd==0x09) | (cmd==0x0A) | (cmd==0x0B) | (cmd==0x0C) | (cmd==0x0D) | (cmd==0x0E) | (cmd==0x0F) |
			(cmd==0x10) | (cmd==0x11) | (cmd==0x12) | (cmd==0x13) | (cmd==0x14) | (cmd==0x15) | (cmd==0x16) | (cmd==0x17) |
			(cmd==0x18) | (cmd==0x19) | (cmd==0x1A) | (cmd==0x1B) | (cmd==0x1C) | (cmd==0x1D) | (cmd==0x1E) | (cmd==0x1F) : ; // none

			(cmd==0x20) | (cmd==0x21) | (cmd==0x22) | (cmd==0x23) : any{
				BufferOffset==3 : par{ // Mono3PointPoly
					generate draw_stg.do();
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0x24) | (cmd==0x25) | (cmd==0x26) | (cmd==0x27) : any{
				BufferOffset==6 : par{ // Textured3PointPoly
					generate draw_stg.do();
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0x28) | (cmd==0x29) | (cmd==0x2A) | (cmd==0x2B) : any{
				BufferOffset==4 : par{ // Mono4PointPoly
					generate draw_stg.do();
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0x2C) | (cmd==0x2D) | (cmd==0x2E) | (cmd==0x2F) : any{
				BufferOffset==8 : par{ // MonoTextured4PointPoly
					generate draw_stg.do();
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0x30) | (cmd==0x31) | (cmd==0x32) | (cmd==0x33) : any{
				BufferOffset==5 : par{ // Gouraud3PointPoly
					generate draw_stg.do();
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0x34) | (cmd==0x35) | (cmd==0x36) | (cmd==0x37) : any{
				BufferOffset==8 : par{ // GouraudTextured3PointPoly
					generate draw_stg.do();
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0x38) | (cmd==0x39) | (cmd==0x3A) | (cmd==0x3B) : any{
				BufferOffset==7 : par{ // Gouraud4PointPoly
					generate draw_stg.do();
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0x3C) | (cmd==0x3D) | (cmd==0x3E) | (cmd==0x3F) : any{
				BufferOffset==11 : par{ // GouraudTextured4PointPoly
					generate draw_stg.do();
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0x40) | (cmd==0x41) | (cmd==0x42) | (cmd==0x43) : any{
				BufferOffset==2 : par{ // MonoLine
				//	generate draw_stg.do();
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0x44) | (cmd==0x45) | (cmd==0x46) | (cmd==0x47) : ; // none

			(cmd==0x48) | (cmd==0x49) | (cmd==0x4A) | (cmd==0x4B) |
			(cmd==0x4C) | (cmd==0x4D) | (cmd==0x4E) | (cmd==0x4F) : any{
				din==0x55555555 : par{ // MonoPolyLine
				//	generate draw_stg.do();
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0x50) | (cmd==0x51) | (cmd==0x52) | (cmd==0x53) : any{
				BufferOffset==3 : par{ // ShadedLine
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0x54) | (cmd==0x55) | (cmd==0x56) | (cmd==0x57) : ; // none

			(cmd==0x58) | (cmd==0x59) | (cmd==0x5A) | (cmd==0x5B) |
			(cmd==0x5C) | (cmd==0x5D) | (cmd==0x5E) | (cmd==0x5F) : any{
				din==0x55555555 : par{ // ShadedPolyLine
				//	generate draw_stg.do();
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0x60) | (cmd==0x61) | (cmd==0x62) | (cmd==0x63) : any{
				BufferOffset==2 : par{ // MonoRect
					generate draw_stg.do();
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0x64) | (cmd==0x65) | (cmd==0x66) | (cmd==0x67) : any{
				BufferOffset==3 : par{ // TexuredRect
					generate draw_stg.do();
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0x68) | (cmd==0x69) | (cmd==0x6A) | (cmd==0x6B) |
			(cmd==0x70) | (cmd==0x71) | (cmd==0x72) | (cmd==0x73) |
			(cmd==0x78) | (cmd==0x79) | (cmd==0x7A) | (cmd==0x7B) : any{
				BufferOffset==1 : par{ // MonoRect
					generate draw_stg.do();
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0x6C) | (cmd==0x6D) | (cmd==0x6E) | (cmd==0x6F) |
			(cmd==0x74) | (cmd==0x75) | (cmd==0x76) | (cmd==0x77) |
			(cmd==0x7C) | (cmd==0x7D) | (cmd==0x7E) | (cmd==0x7F) : any{
				BufferOffset==2 : par{ // TexturedRect
					generate draw_stg.do();
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0x80) : any{ // move image in framebuffer ?
				BufferOffset==3 : par{
					BufferOffset := 0;
				}
				else : BufferOffset++;
			}

			(cmd==0xA0) : any{ // WriteVRAM
				BufferOffset==3 : par{
//if(VramData_image.read_vram) halt(0xA3); // no
//if(ReadData) halt(0xA3); // no
//if(vram_read_req) halt(0xA3); // no
					generate VramData_image.write_vram(din);
				}
				else : par{
					VramPosX := 0;
					VramPosY := 0;
					BufferOffset++;
				}
			}

			(cmd==0xC0) : any{ // ReadVRAM
				BufferOffset==2 : par{
					status_ready_send_vramtocpu := 0b1;
					BufferOffset := 0;
				}
				else : par{
					VramPosX := 0;
					VramPosY := 0;
					BufferOffset++;
				}
			}

			(cmd==0xE1) : par{
				tpage := din<13:0>;
			}
			(cmd==0xE2) : par{
				reg_E2 := din;
			}
			(cmd==0xE3) : par{
				drawX := din<9:0>;
				drawY := din<19:10>;
			}
			(cmd==0xE4) : par{
				drawW := din<9:0>;
				drawH := din<19:10>;
			}
			(cmd==0xE5) : par{
				drawOffsetX := din<10:0>;
				drawOffsetY := din<21:11>;
			}
			(cmd==0xE6) : par{ // Mask Bit Setting
				status_mask_bits := din<1:0>;
			}

			else : par{
dbg_reg := 0x000000||cmd;
				halt(0xA5);
			}
		}
	}

	sel cmd<8>;
	cmd = cmd_reg;

dbg_gpu = 0x0000 || poly.dbg<7:0> || cmd;

	instruct sw_outview_on par{
		fill.sw_outview_on();
		poly.sw_outview_on();
	}

	instruct sw_view_half if(dispW){
		fill.sw_view_half_width();
		poly.sw_view_half_width();
		rect.sw_view_half_width();
	}

	instruct sw_view_half if(dispH){
		fill.sw_view_half_height();
		poly.sw_view_half_height();
		rect.sw_view_half_height();
	}

	instruct texture_full if(^dispW) poly.texture_full();

//poly.dbg_in = dbg_in;

	fill.con(
		px1, py1, pc1,
		px2, py2, drawX, drawY, drawW, drawH);

	poly.con(
		px1+drawOffsetX, py1+drawOffsetY, pc1, pu1, pv1,
		px2+drawOffsetX, py2+drawOffsetY, pc2, pu2, pv2,
		px3+drawOffsetX, py3+drawOffsetY, pc3, pu3, pv3,
		clut, tpage, drawX, drawY, drawW, drawH);
	poly.f_dither = tpage<9>;
	poly.f_texture = ^sw_texture_off & (
		(cmd==0x24) | (cmd==0x25) | (cmd==0x26) | (cmd==0x27) | // 0b0010_01--
		(cmd==0x2C) | (cmd==0x2D) | (cmd==0x2E) | (cmd==0x2F) | // 0b0010_11--
		(cmd==0x34) | (cmd==0x35) | (cmd==0x36) | (cmd==0x37) | // 0b0011_01--
		(cmd==0x3C) | (cmd==0x3D) | (cmd==0x3E) | (cmd==0x3F)); // 0b0011_11--

	poly.f_texblend =
		(cmd==0x24) | (cmd==0x26) | (cmd==0x2C) | (cmd==0x2E) |
		(cmd==0x34) | (cmd==0x36) | (cmd==0x3C) | (cmd==0x3E);
	poly.f_semitrans =
		(cmd==0x22) | (cmd==0x2A) | (cmd==0x26) | (cmd==0x27) | (cmd==0x2E) | (cmd==0x2F) |
		(cmd==0x32) | (cmd==0x3A) | (cmd==0x36) | ((cmd==0x37)) | (cmd==0x3E) | ((cmd==0x3F));

	rect.con(
		px1+drawOffsetX, py1+drawOffsetY,
		px2+drawOffsetX, py2+drawOffsetY,
		pc1, clut, tpage, pu1, pv1, pu2, pv2, drawX, drawY, drawW, drawH);
	rect.f_texture =
		(cmd==0x64) | (cmd==0x65) | (cmd==0x66) | (cmd==0x67) |
		(cmd==0x6C) | (cmd==0x6D) | (cmd==0x6E) | (cmd==0x6F) |
		(cmd==0x74) | (cmd==0x75) | (cmd==0x76) | (cmd==0x77) |
		(cmd==0x7C) | (cmd==0x7D) | (cmd==0x7E) | (cmd==0x7F);
	rect.f_texblend =
		(cmd==0x64) | (cmd==0x66) | (cmd==0x6C) | (cmd==0x6E) |
		(cmd==0x74) | (cmd==0x76) | (cmd==0x7C) | (cmd==0x7E);
	rect.f_semitrans =
		(cmd==0x62) | (cmd==0x6A) | (cmd==0x66) | (cmd==0x67) | (cmd==0x6E) | (cmd==0x6F) |
		(cmd==0x72) | (cmd==0x7A) | (cmd==0x76) | (cmd==0x77) | (cmd==0x7E) | (cmd==0x7F);

	drawing = draw_stg.do;
	vram_busy = VramData_image.write_vram | VramData_image.read_vram;
	busy = (halt_code!=0x00) | (draw_stg.do | VramData_image.write_vram | VramData_image.read_vram);

	sel view_offset_x<10>;
	any{
		// for width 320 of メタルギアソリッド
		(dispWidth==320) & (DispStartX_pre==320) /*((drawOffsetX-320)<10>==0b0)*/ : par{ // drawOffsetX >= 320
			view_offset_x = -320;
		}
		// for width 328 of サガフロ２
		(dispWidth==320) & (DispStartX_pre==328) /*((drawOffsetX-256)<10>==0b0)*/ : par{ // drawOffsetX >= 256
			view_offset_x = -320;
		}
		// for width 256 of PSXNICCC
		(dispWidth==256) & (DispStartX_pre==256) /*((drawOffsetX-256)<10>==0b0)*/ : par{ // drawOffsetX >= 256
			view_offset_x = -256;
		}
		else : view_offset_x = 0;
	}

	sel view_offset_y<9>;
	any{
		// for height 240 of アインハンダー
		(dispHeight==240) & (DispStartY_pre==240) /*((drawOffsetY-240)<10>==0b0)*/ : par{ // drawOffsetY >= 240
			view_offset_y = -240;
		}
		// for height 256 of デュープリズム
		(dispHeight==240) & (DispStartY_pre==256) /*((drawOffsetY-240)<10>==0b0)*/ : par{ // drawOffsetY >= 240
			view_offset_y = -256;
		}
		// for height 224 of レイストーム
		(dispHeight==240) & (DispStartY_pre==224) /*((drawOffsetY-240)<10>==0b0)*/ : par{ // drawOffsetY >= 240
			view_offset_y = -224;
		}
		else : view_offset_y = 0;
	}

	// drawとdispが異なるなら
	if((dispHeight==240) & (drawOffsetY!=(0b00||DispStartY))){
		draw_notdisp_side();
	}

	instruct fill.view_on par{
		view_on();
		view_x = fill.view_x + view_offset_x;
		view_y = fill.view_y + view_offset_y;
		view_R = fill.out_R;
		view_G = fill.out_G;
		view_B = fill.out_B;
		fill_view_on();
	}

	instruct poly.view_on par{
		view_on();
		view_x = poly.view_x + view_offset_x;
		view_y = poly.view_y + view_offset_y;
		view_R = poly.out_R;
		view_G = poly.out_G;
		view_B = poly.out_B;
	}

	instruct rect.view_on par{
		view_on();
		view_x = rect.view_x + view_offset_x;
		view_y = rect.view_y + view_offset_y;
		view_R = rect.out_R;
		view_G = rect.out_G;
		view_B = rect.out_B;
	}

	instruct fill.vram_write_req par{
		vram_write_req(fill.vram_write_adrs, fill.vram_write_data);
	}
	instruct poly.vram_write_req par{
		vram_write_req(poly.vram_adrs, poly.vram_write_data);
	}
	instruct poly.vram_read_req par{
		vram_read_req(poly.vram_adrs);
	}
	instruct rect.vram_read_req par{
		vram_read_req(rect.vram_read_adrs);
	}

//if(vram_write_req & vram_read_req) halt(0xAF); // これ
//if(VramData_image.write_vram & vram_read_req) halt(0xA2); // これ
//if(VramData_image.read_vram & vram_write_req) halt(0xA3); // これ
// とりあえずread_adrsとwrite_adrsを分けてノイズを消した

	instruct vram_write_ack par{
		poly.vram_ack();
		fill.vram_ack();
	}
	instruct vram_read_ack par{
		poly.vram_ack();
		rect.vram_ack();
	}
	poly.vram_read_data = vram_read_data;
	rect.vram_read_data = vram_read_data;

	instruct vram_write par{
		vram_write_req(io_vram_write_adrs, io_vram_din);
		io_vram_write_adrs_reg := io_vram_write_adrs;
		io_vram_din_reg := io_vram_din;
		vram_write_wait := 0b1;
	}
	if(vram_write_wait & ^vram_write_ack) vram_write_req(io_vram_write_adrs_reg, io_vram_din_reg);
	if(vram_write_ack){
		vram_write_wait := 0b0;
	}
	instruct vram_read par{
		vram_read_req(io_vram_read_adrs);
		io_vram_read_adrs_reg := io_vram_read_adrs;
		vram_read_wait := 0b1;
	}
	if(vram_read_wait & ^vram_read_ack) vram_read_req(io_vram_read_adrs_reg);
	if(vram_read_ack){
		vram_read_wait := 0b0;
		vram_read_data_reg := vram_read_data;
	}


	stage VramData_image {
		reg_wr pix, curPixel<19>, f_write_end, f_read_end;
		first_state st_pix;
		state st_pix if((
			(VramData_image.read_vram & (^vram_read_wait)) | 
			(VramData_image.write_vram & (^vram_write_wait))
			) & (^draw_stg.do)){

			sel vram_p<19>, vram_width<16>, vram_height<16>;
			vram_p = CommandBuffer[1]<24:16> || CommandBuffer[1]<9:0>;
			vram_width = CommandBuffer[2]<15:0>;
			vram_height = CommandBuffer[2]<31:16>;

			if(VramData_image.write_vram){
				vram_write(vram_p + curPixel, io_write_data<15:0>);
				io_write_data := io_write_data >> 16;
/*
// test.exeの時
if(^sw_kernel_run){
view_on();
view_x = CommandBuffer[1]<9:0> + VramPosX<9:0>;
view_y = CommandBuffer[1]<24:16> + VramPosY<8:0>;
view_R = io_write_data<4:0> || 0b111;
view_G = io_write_data<9:5> || 0b111;
view_B = io_write_data<14:10> || 0b111;
}
*/
			}
			if(VramData_image.read_vram){
				vram_read(vram_p + curPixel);
			}
			goto st_wait;

			if(((VramPosX+1)-vram_width)<15>==0b0){ // VramPosX+1 >= vram_width
				VramPosX := 0;
				if(((VramPosY+1)-vram_height)<15>==0b0){ // VramPosY+1 >= vram_height
					BufferOffset := 0;
					VramPosY := 0;
					curPixel := 0;
					if(VramData_image.write_vram) f_write_end := 0b1;
					if(VramData_image.read_vram){
						// image send end
						status_ready_send_vramtocpu := 0b0;
						f_read_end := 0b1;
					}
				}
				else{
					curPixel += 0b0000000010000000001 - (0b000||vram_width); // +1024+1
					VramPosY++;
				}
			}
			else{
				curPixel++;
				VramPosX++;
			}
		}
		state st_wait if(
			(VramData_image.read_vram & (^vram_read_wait)) | 
			(VramData_image.write_vram & (^vram_write_wait))
			){

			if(VramData_image.write_vram){
				if(f_write_end){
					f_write_end := 0b0;
					pix := 0b0;
				//	BufferOffset := 0;
					finish;
				}
				else{
					if(pix==0b1) finish;
					pix := ^pix;
				}
				goto st_pix;
			}

			if(VramData_image.read_vram){
				any{
					pix==0b0 : par{
						dout_reg := dout_reg<31:16> || vram_read_data_reg;
						goto st_pix;
					}
					pix==0b1 : par{
						dout_reg := vram_read_data_reg || dout_reg<15:0>;
						goto st_rack;
					}
				}
				pix := ^pix;
			}
		}
		state st_rack par{
			read_ack(); // for ReadData vram2wmem
			if(f_read_end){
				f_read_end := 0b0;
			//	status_ready_send_vramtocpu := 0b0;
			//	BufferOffset := 0;
			}
			goto st_pix;
			finish;
		}
	}

	stage draw_stg {
		first_state st1;
		state st1 par{
			any{
				cmd==0x02 : par{
					// FillFramebufferRect
					px1 := CommandBuffer[1]<10:0>;
					py1 := CommandBuffer[1]<26:16>;
					pc1 := CommandBuffer[0]<23:0>;
					px2 := 0b0 || CommandBuffer[2]<9:0>;
					py2 := 0b00 || CommandBuffer[2]<24:16>;
					fill.draw();
					goto stend;
				}
				(cmd==0x20) | (cmd==0x21) | (cmd==0x22) | (cmd==0x23) : par{
					// Mono3PointPoly
					px1 := CommandBuffer[1]<10:0>;
					py1 := CommandBuffer[1]<26:16>;
					pc1 := CommandBuffer[0]<23:0>;
					px2 := CommandBuffer[2]<10:0>;
					py2 := CommandBuffer[2]<26:16>;
					pc2 := CommandBuffer[0]<23:0>;
					px3 := CommandBuffer[3]<10:0>;
					py3 := CommandBuffer[3]<26:16>;
					pc3 := CommandBuffer[0]<23:0>;
					poly.draw();
					goto stend;
				}
				(cmd==0x24) | (cmd==0x25) | (cmd==0x26) | (cmd==0x27) : par{
					// Textured3PointPoly
					px1 := CommandBuffer[1]<10:0>;
					py1 := CommandBuffer[1]<26:16>;
					pc1 := CommandBuffer[0]<23:0>;
					pu1 := CommandBuffer[2]<7:0>;
					pv1 := CommandBuffer[2]<15:8>;
					px2 := CommandBuffer[3]<10:0>;
					py2 := CommandBuffer[3]<26:16>;
					pc2 := CommandBuffer[0]<23:0>;
					pu2 := CommandBuffer[4]<7:0>;
					pv2 := CommandBuffer[4]<15:8>;
					px3 := CommandBuffer[5]<10:0>;
					py3 := CommandBuffer[5]<26:16>;
					pc3 := CommandBuffer[0]<23:0>;
					pu3 := CommandBuffer[6]<7:0>;
					pv3 := CommandBuffer[6]<15:8>;
					clut := CommandBuffer[2]<31:16>;
					tpage := CommandBuffer[4]<29:16>;
					poly.draw();
					goto stend;
				}
				(cmd==0x28) | (cmd==0x29) | (cmd==0x2A) | (cmd==0x2B) : par{
					// Mono4PointPoly
					px1 := CommandBuffer[1]<10:0>;
					py1 := CommandBuffer[1]<26:16>;
					pc1 := CommandBuffer[0]<23:0>;
					px2 := CommandBuffer[2]<10:0>;
					py2 := CommandBuffer[2]<26:16>;
					pc2 := CommandBuffer[0]<23:0>;
					px3 := CommandBuffer[3]<10:0>;
					py3 := CommandBuffer[3]<26:16>;
					pc3 := CommandBuffer[0]<23:0>;
					poly.draw();
					goto st2;
				}
				(cmd==0x2C) | (cmd==0x2D) | (cmd==0x2E) | (cmd==0x2F) : par{
					// MonoTextured4PointPoly
					px1 := CommandBuffer[1]<10:0>;
					py1 := CommandBuffer[1]<26:16>;
					px2 := CommandBuffer[3]<10:0>;
					py2 := CommandBuffer[3]<26:16>;
					px3 := CommandBuffer[5]<10:0>;
					py3 := CommandBuffer[5]<26:16>;
					pu1 := CommandBuffer[2]<7:0>;
					pv1 := CommandBuffer[2]<15:8>;
					pu2 := CommandBuffer[4]<7:0>;
					pv2 := CommandBuffer[4]<15:8>;
					pu3 := CommandBuffer[6]<7:0>;
					pv3 := CommandBuffer[6]<15:8>;
					clut := CommandBuffer[2]<31:16>;
					tpage := CommandBuffer[4]<29:16>;
					pc1 := CommandBuffer[0]<23:0>;
					pc2 := CommandBuffer[0]<23:0>;
					pc3 := CommandBuffer[0]<23:0>;
					poly.draw();
					goto st2;
				}
				(cmd==0x30) | (cmd==0x31) | (cmd==0x32) | (cmd==0x33) : par{
					// Gouraud3PointPoly
					px1 := CommandBuffer[1]<10:0>;
					py1 := CommandBuffer[1]<26:16>;
					pc1 := CommandBuffer[0]<23:0>;
					px2 := CommandBuffer[3]<10:0>;
					py2 := CommandBuffer[3]<26:16>;
					pc2 := CommandBuffer[2]<23:0>;
					px3 := CommandBuffer[5]<10:0>;
					py3 := CommandBuffer[5]<26:16>;
					pc3 := CommandBuffer[4]<23:0>;
					poly.draw();
					goto stend;
				}
				(cmd==0x34) | (cmd==0x35) | (cmd==0x36) | (cmd==0x37) : par{
					// GouraudTextured3PointPoly
					px1 := CommandBuffer[1]<10:0>;
					py1 := CommandBuffer[1]<26:16>;
					pc1 := CommandBuffer[0]<23:0>;
					pu1 := CommandBuffer[2]<7:0>;
					pv1 := CommandBuffer[2]<15:8>;
					px2 := CommandBuffer[4]<10:0>;
					py2 := CommandBuffer[4]<26:16>;
					pc2 := CommandBuffer[3]<23:0>;
					pu2 := CommandBuffer[5]<7:0>;
					pv2 := CommandBuffer[5]<15:8>;
					px3 := CommandBuffer[7]<10:0>;
					py3 := CommandBuffer[7]<26:16>;
					pc3 := CommandBuffer[6]<23:0>;
					pu3 := CommandBuffer[8]<7:0>;
					pv3 := CommandBuffer[8]<15:8>;
					clut := CommandBuffer[2]<31:16>;
					tpage := CommandBuffer[5]<29:16>;
					poly.draw();
					goto stend;
				}
				(cmd==0x38) | (cmd==0x39) | (cmd==0x3A) | (cmd==0x3B) : par{
					// Gouraud4PointPoly
					px1 := CommandBuffer[1]<10:0>;
					py1 := CommandBuffer[1]<26:16>;
					pc1 := CommandBuffer[0]<23:0>;
					px2 := CommandBuffer[3]<10:0>;
					py2 := CommandBuffer[3]<26:16>;
					pc2 := CommandBuffer[2]<23:0>;
					px3 := CommandBuffer[5]<10:0>;
					py3 := CommandBuffer[5]<26:16>;
					pc3 := CommandBuffer[4]<23:0>;
					poly.draw();
					goto st2;
				}
				(cmd==0x3C) | (cmd==0x3D) | (cmd==0x3E) | (cmd==0x3F) : par{
					// GouraudTextured4PointPoly
					pc1 := CommandBuffer[0]<23:0>;
					px1 := CommandBuffer[1]<10:0>;
					py1 := CommandBuffer[1]<26:16>;
					pu1 := CommandBuffer[2]<7:0>;
					pv1 := CommandBuffer[2]<15:8>;
					clut := CommandBuffer[2]<31:16>;
					pc2 := CommandBuffer[3]<23:0>;
					px2 := CommandBuffer[4]<10:0>;
					py2 := CommandBuffer[4]<26:16>;
					pu2 := CommandBuffer[5]<7:0>;
					pv2 := CommandBuffer[5]<15:8>;
					tpage := CommandBuffer[5]<29:16>;
					pc3 := CommandBuffer[6]<23:0>;
					px3 := CommandBuffer[7]<10:0>;
					py3 := CommandBuffer[7]<26:16>;
					pu3 := CommandBuffer[8]<7:0>;
					pv3 := CommandBuffer[8]<15:8>;
					poly.draw();
					goto st2;
				}
				(cmd==0x60) | (cmd==0x61) | (cmd==0x62) | (cmd==0x63) | // 3
				(cmd==0x68) | (cmd==0x69) | (cmd==0x6A) | (cmd==0x6B) | // 2
				(cmd==0x70) | (cmd==0x71) | (cmd==0x72) | (cmd==0x73) | // 2
				(cmd==0x78) | (cmd==0x79) | (cmd==0x7A) | (cmd==0x7B) : par{ // 2
					// MonoRect
					pc1 := CommandBuffer[0]<23:0>;
					px1 := CommandBuffer[1]<10:0>;
					py1 := CommandBuffer[1]<26:16>;
					sel w<11>, h<11>;
					any{
						(cmd==0x60) | (cmd==0x61) | (cmd==0x62) | (cmd==0x63) : par{
							w = 0b0 || CommandBuffer[2]<9:0>;
							h = 0b00 || CommandBuffer[2]<24:16>;
						}
						(cmd==0x68) | (cmd==0x69) | (cmd==0x6A) | (cmd==0x6B) : par{
							w = 1;
							h = 1;
						}
						(cmd==0x70) | (cmd==0x71) | (cmd==0x72) | (cmd==0x73) : par{
							w = 8;
							h = 8;
						}
						(cmd==0x78) | (cmd==0x79) | (cmd==0x7A) | (cmd==0x7B) : par{
							w = 16;
							h = 16;
						}
					}
					px2 := CommandBuffer[1]<10:0> + w;
					py2 := CommandBuffer[1]<26:16> + h;
					rect.draw();
					goto stend;
				}
				(cmd==0x64) | (cmd==0x65) | (cmd==0x66) | (cmd==0x67) | // 4
				(cmd==0x6C) | (cmd==0x6D) | (cmd==0x6E) | (cmd==0x6F) | // 3
				(cmd==0x74) | (cmd==0x75) | (cmd==0x76) | (cmd==0x77) | // 3
				(cmd==0x7C) | (cmd==0x7D) | (cmd==0x7E) | (cmd==0x7F) : par{ // 3
					// TexturedRect
					pc1 := CommandBuffer[0]<23:0>;
					px1 := CommandBuffer[1]<10:0>;
					py1 := CommandBuffer[1]<26:16>;
					pu1 := CommandBuffer[2]<7:0>;
					pv1 := CommandBuffer[2]<15:8>;
					sel w<11>, h<11>;
					any{
						(cmd==0x64) | (cmd==0x65) | (cmd==0x66) | (cmd==0x67) : par{
							w = 0b0 || CommandBuffer[3]<9:0>;
							h = 0b00 || CommandBuffer[3]<24:16>;
						}
						(cmd==0x6C) | (cmd==0x6D) | (cmd==0x6E) | (cmd==0x6F) : par{
							w = 1;
							h = 1;
						}
						(cmd==0x74) | (cmd==0x75) | (cmd==0x76) | (cmd==0x77) : par{
							w = 8;
							h = 8;
						}
						(cmd==0x7C) | (cmd==0x7D) | (cmd==0x7E) | (cmd==0x7F) : par{
							w = 16;
							h = 16;
						}
					}
					px2 := CommandBuffer[1]<10:0> + w;
					py2 := CommandBuffer[1]<26:16> + h;
					pu2 := CommandBuffer[2]<7:0> + w<7:0>;
					pv2 := CommandBuffer[2]<15:8> + h<7:0>;
					clut := CommandBuffer[2]<31:16>;
					rect.draw();
					goto stend;
				}
				else : par{
dbg_reg := 0x000000||cmd;
					halt(0xA6);
				}
			}
		}
		state st2 if(^poly.drawing){
			any{
				(cmd==0x28) | (cmd==0x29) | (cmd==0x2A) | (cmd==0x2B) : par{
					// Mono4PointPoly
					px1 := CommandBuffer[2]<10:0>;
					py1 := CommandBuffer[2]<26:16>;
					pc1 := CommandBuffer[0]<23:0>;
					px2 := CommandBuffer[3]<10:0>;
					py2 := CommandBuffer[3]<26:16>;
					pc2 := CommandBuffer[0]<23:0>;
					px3 := CommandBuffer[4]<10:0>;
					py3 := CommandBuffer[4]<26:16>;
					pc3 := CommandBuffer[0]<23:0>;
					poly.draw();
					goto stend;
				}
				(cmd==0x2C) | (cmd==0x2D) | (cmd==0x2E) | (cmd==0x2F) : par{
					// Textured4PointPoly
					px1 := CommandBuffer[3]<10:0>;
					py1 := CommandBuffer[3]<26:16>;
					pu1 := CommandBuffer[4]<7:0>;
					pv1 := CommandBuffer[4]<15:8>;
					px2 := CommandBuffer[5]<10:0>;
					py2 := CommandBuffer[5]<26:16>;
					pu2 := CommandBuffer[6]<7:0>;
					pv2 := CommandBuffer[6]<15:8>;
					px3 := CommandBuffer[7]<10:0>;
					py3 := CommandBuffer[7]<26:16>;
					pu3 := CommandBuffer[8]<7:0>;
					pv3 := CommandBuffer[8]<15:8>;
					poly.draw();
					goto stend;
				}
				(cmd==0x38) | (cmd==0x39) | (cmd==0x3A) | (cmd==0x3B) : par{
					// Gouraud4PointPoly
					px1 := CommandBuffer[3]<10:0>;
					py1 := CommandBuffer[3]<26:16>;
					pc1 := CommandBuffer[2]<23:0>;
					px2 := CommandBuffer[5]<10:0>;
					py2 := CommandBuffer[5]<26:16>;
					pc2 := CommandBuffer[4]<23:0>;
					px3 := CommandBuffer[7]<10:0>;
					py3 := CommandBuffer[7]<26:16>;
					pc3 := CommandBuffer[6]<23:0>;
					poly.draw();
					goto stend;
				}
				(cmd==0x3C) | (cmd==0x3D) | (cmd==0x3E) | (cmd==0x3F) : par{
					// GouraudTextured4PointPoly
					pc1 := CommandBuffer[3]<23:0>;
					px1 := CommandBuffer[4]<10:0>;
					py1 := CommandBuffer[4]<26:16>;
					pu1 := CommandBuffer[5]<7:0>;
					pv1 := CommandBuffer[5]<15:8>;
					pc2 := CommandBuffer[6]<23:0>;
					px2 := CommandBuffer[7]<10:0>;
					py2 := CommandBuffer[7]<26:16>;
					pu2 := CommandBuffer[8]<7:0>;
					pv2 := CommandBuffer[8]<15:8>;
					pc3 := CommandBuffer[9]<23:0>;
					px3 := CommandBuffer[10]<10:0>;
					py3 := CommandBuffer[10]<26:16>;
					pu3 := CommandBuffer[11]<7:0>;
					pv3 := CommandBuffer[11]<15:8>;
					poly.draw();
					goto stend;
				}
				else : par{
dbg_reg := 0x000000||cmd;
					halt(0xA7);
				}
			}
		}
		state stend par{
			if((^fill.drawing) & (^poly.drawing) & (^rect.drawing)){
			//	BufferOffset := 0;
				goto st1;
				finish;
			}
		}
	}

}
