/*
	GPU TextureRect
		by pgate1
*/

%i "inv_table.h"

declare mul_u16 interface
{
	input a<16>, b<16>;
	output dout<32>;
	instrin con;
	instr_arg con(a, b);
}

circuit drawTextureRect
{
	input vx1<11>, vy1<11>;
	input vx4<11>, vy4<11>;
	input clut<16>, tpage<16>;
	input vu1<8>, vv1<8>;
	input vu4<8>, vv4<8>;
	instrin con(vx1, vy1, vx4, vy4, clut, tpage, vu1, vv1, vu4, vv4);

	instrin texture_thin;

	instrin draw;
	output drawing;

	inv_table inv_t;

	reg_wr au<16>, av<16>;
	reg_wr pu<16>, pv<16>;

	reg_wr tx<11>, u<8>;

	// VIEW
	output view_x<10>, view_y<9>;
	instrout view_on(view_x, view_y);
	output out_R<8>, out_G<8>, out_B<8>;

	// VRAM
	output vram_read_adrs<19>;
	reg_wr vram_read_adrs_reg<19>;
	instrself vram_read(vram_read_adrs);
	instrout vram_read_req;
	instrin vram_ack;
	input vram_read_data<16>;
	reg_wr vram_read_data_reg<16>;

	reg_wr halt;

	stage_name draw_stg { task do(); }
	stage_name bilinear_vbase { task do(); }
	stage_name texdraw { task do(tx, u); }

	instruct draw generate draw_stg.do();
	drawing = draw_stg.do;

	reg_wr vram_read_wait;
	if(vram_read){
		vram_read_adrs_reg := vram_read_adrs;
		vram_read_req();
		vram_read_wait := 0b1;
	}
	else{
		vram_read_adrs = vram_read_adrs_reg;
	}
	if(vram_read_wait & ^vram_ack) vram_read_req();
	if(vram_ack){
		vram_read_wait := 0b0;
		vram_read_data_reg := vram_read_data;
	}

	sel tr<8>, tg<8>, tb<8>;
	out_R = tr;
	out_G = tg;
	out_B = tb;

	stage draw_stg {
		reg_wr x<11>, y<11>;
		first_state st1;
		state st1 par{
			generate bilinear_vbase.do();
			goto st2;
		}
		state st2 if(^bilinear_vbase.do){
			y := vy1;
			goto st3;
		}
		state st3 par{
			x := vx1;
			pu := vu1 || 8#0b0;
			alt{
				y<10> | (texture_thin & (y<0>==0b1)) : par{ // y < 0
					y++;
					pv += av;
				}
				(y==vy4) | (y==(vy4+1)) : par{ // end
					goto st1; finish;
//goto st5;
				}
				else : par{ // y!=ey
					goto st4;
				}
			}
		}
		state st4 if(^texdraw.do){
			if((x!=vx4) & (x!=(vx4+1))){ // x!=ex
				if(
				//	(y<10>==0b0) &          // y >= 0
				//	(y-0b00111100000)<10> & // y < 480
					(x<10>==0b0) //&          // x >= 0
				//	(x-0b01010000000)<10> & // x < 640
				//	(y<0>==0b0) & (x<0>==0b0) // 320x240
				){
					generate texdraw.do(x, pu<15:8>);
				}
			}
			else{ // x==ex
				y++;
				pv += av;
				goto st3;
			}

			if(/*texture_thin &*/ (x<0>==0b0)){
				x += 2;
				pu += au << 1;
			}
			else{
				x++;
				pu += au;
			}
		}
/*
		state st5 par{
			reg_wr wait_count<3>;
			wait_count++;
			if(/&wait_count){
				goto st1;
				finish;
			}
		}
*/
	}

	stage bilinear_vbase {
		mul_u16 mul;
		first_state st1;
		state st1 par{
			inv_t.read((vx4-vx1)<9:0>);
			goto st_au;
		}
		state st_au par{
			// (<8>||<8>)*<u16> = <32>
			au := mul.con((vu4-vu1)||8#0b0, inv_t.dout).dout<30:15>;
			inv_t.read((vy4-vy1)<9:0>);
			goto st_av;
		}
		state st_av par{
			// (<8>||<8>)*<u16> = <32>
			av := mul.con((vv4-vv1)||8#0b0, inv_t.dout).dout<30:15>;

			pv := vv1 || 8#0b0;
			goto st1;
			finish;
		}
	}

	stage texdraw {
		sel clut_p<19>, tadjust_y<19>, tpage_col<2>;
		sel v<8>;
		reg_wr f_tci_buf_on;
		first_state st_init;
		par{
			sel clut_x<10>, clut_y<9>;
			clut_x = clut<5:0> || 0b0000;
			clut_y = clut<14:6>;
			clut_p = clut_y || clut_x;

			sel tbase_x<10>, tbase_y<9>;
			tbase_x = tpage<3:0> || 0b000000;
			tbase_y = tpage<4> || 0b00000000;
			tadjust_y = tbase_y || tbase_x;

			tpage_col = tpage<8:7>;

			v = pv<15:8>;
		}
		state st_init if(^vram_read_wait){
			any{
				tpage_col==0b00 : par{
					reg_wr u_buf<6>;
					if(u<7:2>==u_buf){
						f_tci_buf_on := 0b1;
					}
					else{
						vram_read((0b0||v||10#0b0) + tadjust_y + ((13#0b0)||u<7:2>));
						f_tci_buf_on := 0b0;
					}
					u_buf := u<7:2>;
					goto st00_1;
				}
				tpage_col==0b10 : par{
					vram_read((0b0||v||10#0b0) + tadjust_y + ((11#0b0)||u));
					goto st00_2;
				}
				else : finish;
			}
		}

		state st00_1 if(/*vram_ack){*/ ^vram_read_wait){
			sel tci<4>;
			reg_wr vram_read_data_buf<16>;
			if(f_tci_buf_on){
				tci = (vram_read_data_buf >> (u<1:0>||0b00))<3:0>;
			}
			else{
				tci = (vram_read_data_reg >> (u<1:0>||0b00))<3:0>;
				vram_read_data_buf := vram_read_data_reg;
			}
			vram_read(clut_p + ((15#0b0)||tci));
			goto st00_2;
		}
		state st00_2 if(/*vram_ack){*/ ^vram_read_wait){
// PSロゴ文字列表示では最上位ビットは見ない
			if(/*(vram_read_data_reg<15>==0b0) &*/ (vram_read_data_reg<14:0>!=0)){
				view_on(tx<9:0>, y<8:0>);
				tr = vram_read_data_reg< 4: 0> || 0b000;
				tg = vram_read_data_reg< 9: 5> || 0b000;
				tb = vram_read_data_reg<14:10> || 0b000;
			}
			goto st_init;
			finish;
		}
	}
}
