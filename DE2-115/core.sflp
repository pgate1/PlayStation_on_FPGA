
/*
	PSX on FPGA feat. DE2-115
	Copyright (c)2016 pgate1
*/

%i "../../../DE2-115/seg7_ctrl.h"
%i "../../../DE2-115/chatmask.h"
%i "../../../DE2-115/sram_ctrl.h"
%i "../../../DE2-115/flashmem_ctrl.h"
%i "../../../DE2-115/sdcard_ctrl_sdmode.h"
%i "../../../hdl/fat16.h"
%i "../../../DE2-115/dac_ctrl.h"
%i "../../../DE2-115/ISP1362_ctrl.h"
%i "../../../DE2-115/lcd_ctrl.h"

%i "../PlayStation_core.h"
%i "../DDS_50to33868800.h"
%i "../VGA_ctrl.h"
%i "../view_ram_ctrl.h"
%i "../gamma_correction.h"

declare bcd_itob interface
{
	input bin<8>;
	output bcd<8>;
	instrin con;
	instr_arg con(bin);
}

circuit core
{
	input KEY<4>, SW<18>;
	chatmask cmask_1, cmask_2, cmask_3;
	sel key1, key2, key3;
	output LEDR<18>, LEDG<9>;
	seg7_ctrl seg7_0, seg7_1, seg7_2, seg7_3, seg7_4, seg7_5, seg7_6, seg7_7;
	output HEX0<7>, HEX1<7>, HEX2<7>, HEX3<7>, HEX4<7>, HEX5<7>, HEX6<7>, HEX7<7>;
	sel seg<32>;
//--------------------- SRAM Interface ---------------------
// 参考 adrs<20> data<16>
	sram_ctrl sram;
	output SRAM_CEn, SRAM_OEn, SRAM_WEn;
	output SRAM_LBn, SRAM_UBn, SRAM_DEn;
	output SRAM_ADDR<20>;
	input  SRAM_Din<16>;
	output SRAM_Dout<16>;
//--------------------- SDRAM Interface --------------------
	instrout sdram_write(sdram_adrs, sdram_wdata, sdram_de);
	output sdram_adrs<25>, sdram_wdata<32>, sdram_de<4>;
	instrout sdram_read(sdram_adrs);
	input sdram_rdata<32>;
	input sdram_ack, sdram_refresh_doing, sdram_err;
//--------------------- Flash Interface --------------------
	flashmem_ctrl flash;
	output FLASH_RSTn, FLASH_CEn;
	output FLASH_OEn,  FLASH_WEn;
	output FLASH_ADDR<23>;
	input FLASH_Din<8>;
//--------------------- VGA --------------------------------
	VGA_ctrl vga;
	output VGA_BLANKn, VGA_HS, VGA_VS;
	output VGA_R<8>, VGA_G<8>, VGA_B<8>;
	reg_wr clock25M_div;
//--------------------- Audio ------------------------
	dac_ctrl dac;
	input audio_RD;
	output audio_DATA<32>;
	instrout audio_SET;
	output audio_VOL<7>;
//--------------------- SD_Card Interface ------------------
	sdcard_ctrl_sdmode sdcard;
	output SD_CLK;    // SD Card Clock
	output SD_CMD_en; // SD Card CMD Enable
	output SD_CMD;    // SD Card Command
	input  SD_RES;    // SD Card Response
	input  SD_DAT<4>; // SD Card Data
	fat16 fat;
//--------------------- USB ISP1362 ------------------------
	output USB_ADDR<2>, USB_Dout<16>;
	output USB_WRn, USB_RDn;
	input USB_Din<16>;
	ISP1362_ctrl usb;
//--------------------- LCD --------------------------------
	lcd_ctrl lcd;
	output LCD_RS, LCD_RW, LCD_EN, LCD_DATA<8>;

	reg_ws reset;

	PlayStation_core psx;
	DDS_50to33868800 dds;

	reg_wr exe_read_ok, psx_run_ok;
	reg_wr chksum<8>;

	reg_wr bA<19>; // bios 512kB
	reg_wr tA<21>; // ram 2MB
	reg_wr d0<8>, d1<8>, d2<8>;

	view_ram_ctrl view_ram;
//	gamma_correction gammaR, gammaG, gammaB;

	bcd_itob fps;

	instrself halt(halt_sel);
	sel halt_sel<8>;
	reg_wr halt_code<8>;

//stage_name kernel_sum { task do(); }
	stage_name psximg_read { task do(); }
	stage_name bios_flash2ram { task do(); }
//	stage_name bios_sdcard2ram { task do(); }
	stage_name wram_clear { task do(); }
//	stage_name kernel_flash2ram { task do(); }
	stage_name psxexe_read { task do(); }
	stage_name sram_clear { task do(); }

	if(reset){
		generate bios_flash2ram.do();
	//	generate bios_sdcard2ram.do();
	//	audio_SET();
		reset := 0b0;
	}

	instruct halt halt_code := halt_sel;

	cmask_1.bin = ^KEY<1>; key1 = cmask_1.bout;
	cmask_2.bin = ^KEY<2>; key2 = cmask_2.bout;
	cmask_3.bin = ^KEY<3>; key3 = cmask_3.bout;

	HEX7 = seg7_7.con(seg<31:28>).oSEG;
	HEX6 = seg7_6.con(seg<27:24>).oSEG;
	HEX5 = seg7_5.con(seg<23:20>).oSEG;
	HEX4 = seg7_4.con(seg<19:16>).oSEG;
	HEX3 = seg7_3.con(seg<15:12>).oSEG;
	HEX2 = seg7_2.con(seg<11: 8>).oSEG;
	HEX1 = seg7_1.con(seg< 7: 4>).oSEG;
	HEX0 = seg7_0.con(seg< 3: 0>).oSEG;

	SRAM_CEn = sram.CEn;
	SRAM_OEn = sram.OEn;
	SRAM_WEn = sram.WEn;
	SRAM_LBn = sram.LBn;
	SRAM_UBn = sram.UBn;
	SRAM_DEn = sram.DEn;
	SRAM_ADDR = sram.ADDR;
	sram.Din = SRAM_Din;
	SRAM_Dout = sram.Dout;

	FLASH_RSTn = flash.RSTn;
	FLASH_CEn = flash.CEn;
	FLASH_OEn = flash.OEn;
	FLASH_WEn = flash.WEn;
	FLASH_ADDR = flash.ADDR;
	flash.Din = FLASH_Din;

	SD_CLK    = sdcard.CLK;
	SD_CMD_en = sdcard.CMD_en;
	SD_CMD    = sdcard.CMD;
	sdcard.RES = SD_RES;
	sdcard.DAT = SD_DAT;

	if(psx.sw_kernel_run){
	}
	else{ // PSX-EXE
		fat.sack = sdcard.ack;
		fat.sdata = sdcard.rdata;
		instruct fat.sread sdcard.read(fat.sadrs);
	}
/*
	par{
		reg_wr out_L_reg<32>, out_R_reg<32>;

		sel clip_voice_L<17>, clip_voice_R<17>;
		any{
			psx.voice_L<20:17>==0b1110 : clip_voice_L = 0x8000||0b0;
			psx.voice_L<20:17>==0b0001 : clip_voice_L = 0x7FFF||0b1;
			else : clip_voice_L = psx.voice_L<16:0>;
		}
		any{
			psx.voice_R<20:17>==0b1110 : clip_voice_R = 0x8000||0b0;
			psx.voice_R<20:17>==0b0001 : clip_voice_R = 0x7FFF||0b1;
			else : clip_voice_R = psx.voice_R<16:0>;
		}
		reg_wr sw_15; sw_15 := SW<15>;
		if(sw_15){ // 音量を上げる
			out_L_reg := 19#clip_voice_L || 13#0b0;
			out_R_reg := 19#clip_voice_R || 13#0b0;
		//	audio_VOL = 0b1111111; // +6dB
		}
		else{
			out_L_reg := psx.voice_L || 11#0b0;
			out_R_reg := psx.voice_R || 11#0b0;
		}
		audio_VOL = 0b1111001; // 0dB
		dac.data_L = out_L_reg;
		dac.data_R = out_R_reg;
		dac.RD = audio_RD;
		audio_DATA = dac.Dout;
	}
*/
	// USB
	USB_ADDR = usb.A;
	USB_Dout = usb.Dout;
	usb.Din = USB_Din;
	USB_WRn = usb.WRn;
	USB_RDn = usb.RDn;
/*
	lcd.str0 = str;
	lcd.str1 = "                ";
	LCD_RS = lcd.rs;
	LCD_RW = lcd.rw;
	LCD_EN = lcd.en;
	LCD_DATA = lcd.data;
*/
	clock25M_div := ^clock25M_div;
	if(clock25M_div) vga.htiming();
	reg_wr vga_en_reg, vga_hsync_reg, vga_vsync_reg;
	vga_en_reg := vga.en; VGA_BLANKn = vga_en_reg;
	vga_hsync_reg := vga.h_sync; VGA_HS = vga_hsync_reg;
	vga_vsync_reg := vga.v_sync; VGA_VS = vga_vsync_reg;
/*
	if((vga.h_count==0) | (vga.h_count==639) |
	   (vga.v_count==0) | (vga.v_count==479)){
		vga.iR = 0xFF; vga.iG = 0xFF; vga.iB = 0xFF;
	}
*/

	par{ // サウンドエフェクト
		reg_wr level_L_t<11>, level_L<11>;
		reg_wr level_R_t<11>, level_R<11>;
/*
		sel voice_L<11>;
		any{
			psx.voice_L<20>==0b0 : voice_L = psx.voice_L<18:8>;
			psx.voice_L<20>==0b1 : voice_L = (^psx.voice_L + 1)<18:8>;
		}

		any{
			vga.h_count==0   : level_L_t := voice_L;
			vga.h_count==400 : level_L_t += voice_L;
			vga.h_count==640 : level_L := level_L_t;
		}

		sel voice_R<11>;
		any{
			psx.voice_R<20>==0b0 : voice_R = psx.voice_R<18:8>;
			psx.voice_R<20>==0b1 : voice_R = (^psx.voice_R + 1)<18:8>;
		}

		any{
			vga.h_count==0   : level_R_t := voice_R;
			vga.h_count==400 : level_R_t += voice_R;
			vga.h_count==640 : level_R := 0b01010000000 - level_R_t; // 640 - level
		}
*/
		if((^psx.sw_kernel_run) &
			(((0b0||vga.h_count)-level_L)<10> | (((0b0||vga.h_count)-level_R)<10>==0b0))
		){
		//	vga.iR = 0xFF; vga.iG = 0xFF; vga.iB = 0xFF;
			vga.iR = ((0b0||view_ram.out_R)+0b011111)<5:1> || 0b111;
			vga.iG = ((0b0||view_ram.out_G)+0b011111)<5:1> || 0b111;
			vga.iB = ((0b0||view_ram.out_B)+0b011111)<5:1> || 0b111;
		}
		else{
			vga.iR = view_ram.out_R || 0b111;
			vga.iG = view_ram.out_G || 0b111;
			vga.iB = view_ram.out_B || 0b111;
		}
	}
	reg_wr vga_R_reg<8>, vga_G_reg<8>, vga_B_reg<8>;
//	if(SW<14>){ // ガンマ補正(γ=2.0)
//		VGA_R = gammaR.con(vga.oR<7:3>).dout;
//		VGA_G = gammaG.con(vga.oG<7:3>).dout;
//		VGA_B = gammaB.con(vga.oB<7:3>).dout;
//	}
//	else{
		vga_R_reg := vga.oR;
		vga_G_reg := vga.oG;
		vga_B_reg := vga.oB;
//	}
	VGA_R = vga_R_reg;
	VGA_G = vga_G_reg;
	VGA_B = vga_B_reg;

	reg_wr boot_count<26>, pass_1sec;
	if(/&boot_count) pass_1sec := 0b1;
	else boot_count++;

	reg_wr count_1sec<26>, count_frame<8>, count_frame_reg<8>;
	if(count_1sec==50000000){
		count_frame_reg := count_frame;
		count_frame := 0;
		count_1sec := 0;
	}
	else count_1sec++;
	fps.bin = count_frame_reg;

	instruct psx.view_on par{
		sel psx_view_x<9>, psx_view_y<8>;

		if(psx.dispW /*| psx.sw_view_half*/) psx_view_x = psx.view_x<9:1>; // 640->320
		else psx_view_x = psx.view_x<8:0>; // 320->320
		if(psx.dispH /*| psx.sw_view_half*/) psx_view_y = psx.view_y<8:1>; // 480->240
		else psx_view_y = psx.view_y<7:0>; // 240->240

		view_ram.write(psx_view_x, psx_view_y,
			psx.view_R<7:3>, psx.view_G<7:3>, psx.view_B<7:3>);
	}
	instruct vga.view view_ram.read();
	instruct vga.vblank_begin par{
		view_ram.read_adrs_reset();
		reg_wr vblank_wait;
		if(exe_read_ok & (^vblank_wait) & pass_1sec){
			psx_run_ok := 0b1;
			vblank_wait := 0b1;
		}
		if(/*(^psx.drawing) &*/ (^psx.stop)){
			if(psx_run_ok) psx.vblank_begin();
			//reg_wr flip; flip := ^flip; // 30fps
		//	if(flip | ^psx.sw_kernel_run) view_ram.bank_change();
		}
	}
	instruct vga.vblank_end psx.vblank_end();
//	if(psx.sw_kernel_run) view_ram.frame_rate = 1;
//	else view_ram.frame_rate = 0;
	instruct psx.display_flip view_ram.bank_change();
//	instruct psx.fill_view_on view_ram.fill_view_on();
	instruct psx.draw_notdisp_side view_ram.draw_notdisp_side();

	if(exe_read_ok & psx_run_ok & (halt_code==0x00) & (^psx.stop)){
		instruct dds.run psx.run33();
		psx.cpu_run();
	}

	// ubs.button1<12> : L2,R2, B,Y,Sl,St, Up,Dn,Le,Ri, A,X,L,R
	// PS : □,×,○,△,R,L,R2,L2,←,↓,→,↑,St,0,0,Sl
	psx.key_in = (0b00 || key1 || 0b0_0000_0 || key2 || 0b0 || key3 || 0b0000) |
		(usb.button1<10> || usb.button1<11> || usb.button1<3> || usb.button1<2> ||
		usb.button1<0> || usb.button1<1> || usb.button1<13> || usb.button1<12> ||
		usb.button1<5> || usb.button1<6> || usb.button1<4> || usb.button1<7> ||
		usb.button1<8> || 0b00 || usb.button1<9>);

if(SW<15>) psx.sw_cache_off();
//psx.sw_intpl_off();
psx.sw_reverb_off();
//psx.sw_spu_off(); // アインハンダーカウントダウンのためにSPU必要
psx.sw_spuenv_off();
	reg_wr sw_16; sw_16 := SW<16>;
//psx.sw_outview_on();
	reg_wr sw_17; sw_17 := SW<17>;
	psx.sw_cdrom_ctrl = sw_17 || sw_16;
	if(psx.sw_cdrom_ctrl!=0b01) psx.sw_kernel_run();
	reg_wr sw_15; sw_15 := SW<15>;
	if((psx.key_in<9> & psx.key_in<11>) | sw_15) psx.stop();
	reg_wr sw_14; sw_14 := SW<14>;
	if(sw_14) psx.sw_view_half();
reg_wr dbg_in<16>;
dbg_in := SW<15:0>;
psx.dbg_in = dbg_in;

reg_wr dbg_file_read_count<32>;
reg_wr dbg_file_adrs<32>;
reg_wr dbg_file_sum<32>;

	any{
		psxexe_read.do : seg = 0x0000||tA<20:5>;
		key3 : seg = chksum || psx.dbg_cpu || 0x00 || psx.halt_code;
		key2 : seg = psx.dbg;
		key1 : seg = psx.dbg_gpu;// || 0x00 || halt_code;//psx.dbg2;
		else : seg = psx.pc_out<31:8> || fps.bcd;
	}

	LEDR = (0b0000000000000000 || /|halt_code || /|psx.halt_code) /*| psx.disp_env<23:6>*/ | (0b00||psx.key_in);
	LEDG = psxexe_read.do || /*psx.disp_env<5:0>*/0b000000 || psx.dma_running || psx.drawing;

	instruct psx.WRAM_READ par{
		sdram_read(0b000000||psx.A<20:2>);
	}
	if(sdram_ack) psx.wram_ack();

	instruct psx.WRAM_WRITE par{
		any{
			psx.Word==4 : sdram_write(0b000000||psx.A<20:2>, psx.Dout, 0b1111);
			psx.Word==2 : any{
				psx.A<1>==0b0 : sdram_write(0b000000||psx.A<20:2>, 0x0000||psx.Dout<15:0>, 0b0011);
				psx.A<1>==0b1 : sdram_write(0b000000||psx.A<20:2>, psx.Dout<15:0>||0x0000, 0b1100);
			}
			psx.Word==1 : any{
				psx.A<1:0>==0b00 : sdram_write(0b000000||psx.A<20:2>, 0x000000||psx.Dout<7:0>,     0b0001);
				psx.A<1:0>==0b01 : sdram_write(0b000000||psx.A<20:2>, 0x0000||psx.Dout<7:0>||0x00, 0b0010);
				psx.A<1:0>==0b10 : sdram_write(0b000000||psx.A<20:2>, 0x00||psx.Dout<7:0>||0x0000, 0b0100);
				psx.A<1:0>==0b11 : sdram_write(0b000000||psx.A<20:2>, psx.Dout<7:0>||0x000000,     0b1000);
			}
		}
	}

	instruct psx.BIOS_READ par{
		sdram_read(0b10000000||psx.A<18:2>);
	}
	psx.Din = sdram_rdata;
	if(sdram_ack) psx.bios_ack();

//if(psx.spu_mem_read_req & psx.spu_mem_write_req) halt(0x31); // no
//if(psx.vram_read_req & psx.vram_write_req) halt(0x32); // これ

//sram 2byte/3clk=xbyte/50,000,000clk
//x=33.3MB/s
//brockram 4byte/1clk=xbyte/50,000,000clk
//x=200MB/s
	reg_wr gpu_read_wait_ack, gpu_write_wait_ack, spu_wait_ack;
	alt{
		gpu_read_wait_ack | gpu_write_wait_ack | spu_wait_ack : ;

		psx.vram_read_req : par{
			sram.read(0b1||psx.vram_read_adrs);
			gpu_read_wait_ack := 0b1;
		}

		psx.vram_write_req : par{
			sram.write(0b1||psx.vram_write_adrs, psx.vram_write_data, 0b11);
			gpu_write_wait_ack := 0b1;
		}

		psx.spu_mem_read_req /*& ^psx.sw_spu_off*/ : par{
			sram.read(0b00||psx.spu_mem_A);
			spu_wait_ack := 0b1;
		}

		psx.spu_mem_write_req /*& ^psx.sw_spu_off*/ : par{
			sram.write(0b00||psx.spu_mem_A, psx.spu_mem_Din, 0b11);
			spu_wait_ack := 0b1;
		}

	}
	psx.spu_mem_Dout = sram.rdata;
	psx.vram_read_data = sram.rdata;

//	if(psx.sw_spu_off) psx.spu_mem_ack();

	if(gpu_read_wait_ack){
		if(sram.ack){
			psx.vram_read_ack();
			gpu_read_wait_ack := 0b0;
		}
	}

	if(gpu_write_wait_ack){
		if(sram.ack){
			psx.vram_write_ack();
			gpu_write_wait_ack := 0b0;
		}
	}

	if(spu_wait_ack){
		if(sram.ack){
			psx.spu_mem_ack();
			spu_wait_ack := 0b0;
		}
	}

	instruct psx.kernel_ok par{
		exe_read_ok := 0b0;
		generate psxexe_read.do();
	//	generate kernel_sum.do();
	}
/*
	stage kernel_sum {
		reg_wr kA<16>;
		first_state st1;
		state st1 if(sdram_ack){
			sdram_read(0);
			kA := 4;
			goto st2;
		}
		state st2 if(sdram_ack){
			chksum += sdram_rdata<31:24> + sdram_rdata<23:16> + sdram_rdata<15:8> + sdram_rdata<7:0>;
			sdram_read(0b00000000000||kA<15:2>);
			kA += 4;
			if(kA==0) goto st3;
		}
		state st3 ;
	}
*/
	stage psximg_read {
		reg_wr sector_begin<32>, sector_num<32>;
		reg_wr psxexe_read_error;
		first_state st_fs0;
		par{
			psx.file_error = psxexe_read_error;
		}
		state st_fs0 if(sdcard.ack){
			// FirstSector位置読み取り(4Byte)
			sdcard.read(0x000001C6);
			goto st_fs1;
		}
		state st_fs1 if(sdcard.ack){
			sector_begin := sector_begin<31:8> || sdcard.rdata;
			sdcard.read(0x000001C7);
			goto st_fs2;
		}
		state st_fs2 if(sdcard.ack){
			sector_begin := sector_begin<31:16> || sdcard.rdata || sector_begin<7:0>;
			sdcard.read(0x000001C8);
			goto st_fs3;
		}
		state st_fs3 if(sdcard.ack){
			sector_begin := sector_begin<31:24> || sdcard.rdata || sector_begin<15:0>;
			sdcard.read(0x000001C9);
			goto st_sn0;
		}
		state st_sn0 if(sdcard.ack){
			sector_begin := sdcard.rdata || sector_begin<23:0>;

			// セクタ数読み取り(4Byte)
			sdcard.read(0x000001CA);
			goto st_sn1;
		}
		state st_sn1 if(sdcard.ack){
			sector_num := sector_num<31:8> || sdcard.rdata;
			sdcard.read(0x000001CB);
			goto st_sn2;
		}
		state st_sn2 if(sdcard.ack){
			sector_num := sector_num<31:16> || sdcard.rdata || sector_num<7:0>;
			sdcard.read(0x000001CC);
			goto st_sn3;
		}
		state st_sn3 if(sdcard.ack){
			sector_num := sector_num<31:24> || sdcard.rdata || sector_num<15:0>;
			sdcard.read(0x000001CD);
			goto st_sn4;
		}
		state st_sn4 if(sdcard.ack){
			sector_num := sdcard.rdata || sector_num<23:0>;
			goto st_read;
		}

		state st_read if(psx.file_read & sdcard.ack){
			psxexe_read_error := 0b0;

			sdcard.read((sector_begin<<9) + psx.file_adrs);
			goto st_data;
		}
		state st_data if(sdcard.ack){
			psx.file_data = sdcard.rdata;
			psx.file_ack();
			goto st_read;
		}
	}

	stage bios_flash2ram {
		first_state st_open;
		state st_open par{
			bA := 0;
			goto st_read;
		}
		state st_read if(flash.ack){
			flash.read(0b0000||bA);
			goto st_write;
		}
		state st_write if(flash.ack & sdram_ack){
			switch(bA<1:0>){ // ok
				case 0b00: d0 := flash.rdata;
				case 0b01: d1 := flash.rdata;
				case 0b10: d2 := flash.rdata;
				case 0b11: sdram_write(0b10000000||bA<18:2>, flash.rdata||d2||d1||d0, 0b1111);
			}
			bA++;
			if(/&bA) goto st_end;
			else goto st_read;
		}
		state st_end if(sdram_ack){
			generate wram_clear.do();
			finish;
		}
	}
/*
	stage bios_sdcard2ram {
		first_state st_open;
		state st_open if(fat.ack){
			bA := 0;
		//	chksum := 0x00;
			fat.fopen(0x00);
			goto st_read;
		}
		state st_read if(fat.ack){
			fat.read();
			goto st_write;
		}
		state st_write if(fat.ack & sdram_ack){
			switch(bA<1:0>){ // ok
				case 0b00: d0 := fat.fdata;
				case 0b01: d1 := fat.fdata;
				case 0b10: d2 := fat.fdata;
				case 0b11: sdram_write(0b10000000||bA<18:2>, fat.fdata||d2||d1||d0, 0b1111);
			}
		//	chksum += fat.fdata;
			bA++;
			if(/&bA) goto st_end;
			else goto st_read;
		}
		state st_end if(sdram_ack){
			generate wram_clear.do();
			finish;
		}
	}
*/
	stage wram_clear {
		reg_wr wA<19>;
		first_state sst;
		state sst par{
			wA := 0; // kernel領域もクリアしておく
		//	wA := 0b000||0x4000; // kernelはflashからの場合
			goto st1;
		}
		state st1 if(sdram_ack){
			sdram_write(0b000000||wA, 0x00000000, 0b1111);
			wA++;
			if(/&wA) goto st2;
		}
		state st2 if(sdram_ack){
		//	if(psx.sw_kernel_run){ // for BIOS
				generate sram_clear.do();
				generate psximg_read.do();
		//	}
		//	else{ // for PSX-EXE
		//		generate kernel_flash2ram.do();
		//	}
			finish;
		}
	}
/*
	stage kernel_flash2ram {
		reg_wr kA<16>; // 64kB
		first_state st_open;
		state st_open par{
		//	kA := 0;
			goto st_read;
		}
		state st_read if(flash.ack){
			flash.read(0b0001000||kA);
			goto st_write;
		}
		state st_write if(flash.ack & sdram_ack){
			switch(kA<1:0>){
				case 0b00: d0 := flash.rdata;
				case 0b01: d1 := flash.rdata;
				case 0b10: d2 := flash.rdata;
				case 0b11: sdram_write(0b00000000000||kA<15:2>, flash.rdata||d2||d1||d0, 0b1111);
			}
			kA++;
			if(/&kA) goto st_end;
			else goto st_read;
		}
		state st_end if(sdram_ack){
			generate psxexe_read.do();
			finish;
		}
	}
*/
	stage psxexe_read {
		reg_wr text_end<21>; // 2MB
		first_state st_open;
		state st_open if(fat.ack){
			fat.fopen(SW<7:0>);
		//	chksum := 0x00;
			goto st_hpre;
		}
		state st_hpre if(fat.ack){
			fat.read();
			goto st_head;
		}
		state st_head if(fat.ack){
			reg_wr hA<12>; // 0x800
			reg_wr text_sec_0<8>, text_sec_1<8>, text_sec_2<8>;
			reg_wr text_size_0<8>, text_size_1<8>, text_size_2<8>;
			psx.exe_set(hA, fat.fdata);
			any{
				hA==0x018 : text_sec_0 := fat.fdata;
				hA==0x019 : text_sec_1 := fat.fdata;
				hA==0x01A : text_sec_2 := fat.fdata;
				hA==0x01B : tA := text_sec_2<4:0>||text_sec_1||text_sec_0;
				hA==0x01C : text_size_0 := fat.fdata;
				hA==0x01D : text_size_1 := fat.fdata;
				hA==0x01E : text_size_2 := fat.fdata;
				hA==0x01F : text_end := tA + (text_size_2<4:0>||text_size_1||text_size_0);
			}
			fat.read();
			hA++;
			if(hA==0x7FF) goto st_text;
		}
		state st_text if(fat.ack & sdram_ack){
			switch(tA<1:0>){
				case 0b00: d0 := fat.fdata;
				case 0b01: d1 := fat.fdata;
				case 0b10: d2 := fat.fdata;
				case 0b11: sdram_write(0b000000||tA<20:2>, fat.fdata||d2||d1||d0, 0b1111);
			}
		//	chksum += fat.fdata;
			fat.read();
			tA++;
			if(tA==(text_end-1)) goto st_end;
		//	if(/&tA) goto st_end; // 2MB最後まで無理やりロード(時間稼ぎのため)
		}
		state st_end if(sdram_ack){
		//	lcd.view_on();
			generate sram_clear.do();
			finish;
		}
	}

	stage sram_clear {
		first_state st1;
		state st1 if(sram.ack){
			// Sound RAM clear
			reg_wr sA<18>; // 256kW(512kB)
			sram.write(0b00||sA, 0x0000, 0b11);
			sA++;
			if(/&sA) goto st2;
		}
		state st2 if(sram.ack){
			// Video RAM clear
			reg_wr vA<19>; // 512kW(1MB)
			sram.write(0b1||vA, 0x0000, 0b11);
			vA++;
			if(/&vA) goto st3;
		}
		state st3 if(sram.ack){
			exe_read_ok := 0b1;
			finish;
		}
	}

}
