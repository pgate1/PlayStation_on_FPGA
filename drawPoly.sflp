/*
	GPU draw Poly
		by pgate1
*/

// coordinate 11.15
// color 8.9
#define CMULS 9

// texture 8.9(仮)
#define TMULS 9

%i "inv_table.h"

%i "drawpoly_cache.h"

declare mul_s26s16 interface
{
	input a<26>, b<16>;
	output dout<42>;
	instrin con;
	instr_arg con(a, b);
}

declare mul_s18s16 interface
{
	input a<18>, b<16>;
	output dout<34>;
	instrin con;
	instr_arg con(a, b);
}

declare mul_s11 interface
{
	input a<11>, b<11>;
	output dout<22>;
	instrin con;
	instr_arg con(a, b);
}

declare compare_s11 interface
{
	input a<11>, b<11>;
	instrin gt, lt, gte, lte;
	output result;
	instr_arg gt(a, b);
	instr_arg lt(a, b);
	instr_arg gte(a, b);
	instr_arg lte(a, b);
}

circuit drawPoly
{
	input px1<11>, py1<11>, pc1<24>, pu1<8>, pv1<8>; // A点
	input px2<11>, py2<11>, pc2<24>, pu2<8>, pv2<8>; // B点
	input px3<11>, py3<11>, pc3<24>, pu3<8>, pv3<8>; // C点
	input clut<16>, tpage<14>;
	input drawX<10>, drawY<10>, drawW<10>, drawH<10>;
	instrin con(px1, py1, pc1, pu1, pv1, px2, py2, pc2, pu2, pv2, px3, py3, pc3, pu3, pv3, clut, tpage, drawX, drawY, drawW, drawH);

	instrin draw;
	output drawing;

	instrself vertex_sort;
	compare_s11 cmp12, cmp13, cmp23;
	// Yソート後
	reg_wr x1<11>, y1<11>, r1<8>, g1<8>, b1<8>, u1<8>, v1<8>;
	reg_wr x2<11>, y2<11>, r2<8>, g2<8>, b2<8>, u2<8>, v2<8>;
	reg_wr x3<11>, y3<11>, r3<8>, g3<8>, b3<8>, u3<8>, v3<8>;

	inv_table inv_t;

	mul_s11 mule1, mule2;
	reg_wr eval;
	sel upper;

	mul_s18s16 mulcr, mulcg, mulcb;
	mul_s18s16 multu, multv;

	reg_wr sy<11>, ey<11>;
	reg_wr sx<11>, ex<11>;
	reg_wr dr<8+CMULS>, dg<8+CMULS>, db<8+CMULS>;
	reg_wr vr<8+CMULS>, vg<8+CMULS>, vb<8+CMULS>;
	reg_wr du<8+TMULS>, dv<8+TMULS>;
	reg_wr vu<8+TMULS>, vv<8+TMULS>;
	instrself delta_add;

	reg_wr x<11>, y<11>;
	compare_s11 cmp_ex, cmp_ey, cmp_x, cmp_y, cmp_w, cmp_h;

	input f_dither;
	mem dither_table[16]<4> = {	// Dither
		-4,  0, -3,  1,
		 2, -2,  3, -1,
		-3,  1, -4,  0,
		 3, -1,  2, -2
	};

	input f_texture;
	sel tr<8>, tg<8>, tb<8>;
	input f_texblend;
	input f_semitrans;

	instrin sw_outview_on, sw_view_half;

	// VIEW 640x480(320x240)
	output view_x<10>, view_y<9>;
	instrout view_on(view_x, view_y);
	output out_R<8>, out_G<8>, out_B<8>;

	// VRAM
	output vram_adrs<19>, vram_write_data<16>;
	reg_wr vram_adrs_reg<19>, vram_write_data_reg<16>;
	instrself vram_write(vram_adrs, vram_write_data), vram_read(vram_adrs);
	instrout vram_write_req, vram_read_req;
	instrin vram_ack;
	input vram_read_data<16>;
//	reg_wr vram_read_data_reg<16>;

	drawpoly_cache tcache;

input dbg_in<16>;
output dbg<32>;
reg_wr dbg_reg<32>;

	stage_name draw_stg { task do(); }
	stage_name texdraw { task do(); }
	stage_name bilinear_vbase { task do(); }
	stage_name bilinear_hbase { task do(); }

dbg = dbg_reg;

	instruct draw generate draw_stg.do();
	drawing = draw_stg.do;

	// 3点の入れ替え
	instruct vertex_sort par{
		sel s1_y1<11>, s1_x1<11>, s1_c1<24>, s1_u1<8>, s1_v1<8>;
		sel s1_y2<11>, s1_x2<11>, s1_c2<24>, s1_u2<8>, s1_v2<8>;
		if(cmp12.gt(py1, py2).result){ // y1 > y2
			s1_y1 = py2; s1_y2 = py1;
			s1_x1 = px2; s1_x2 = px1;
			s1_c1 = pc2; s1_c2 = pc1;
			s1_u1 = pu2; s1_u2 = pu1;
			s1_v1 = pv2; s1_v2 = pv1;
		}
		else{
			s1_y1 = py1; s1_y2 = py2;
			s1_x1 = px1; s1_x2 = px2;
			s1_c1 = pc1; s1_c2 = pc2;
			s1_u1 = pu1; s1_u2 = pu2;
			s1_v1 = pv1; s1_v2 = pv2;
		}

		sel s2_y1<11>, s2_x1<11>, s2_c1<24>, s2_u1<8>, s2_v1<8>;
		sel s2_y3<11>, s2_x3<11>, s2_c3<24>, s2_u3<8>, s2_v3<8>;
		if(cmp13.gt(s1_y1, py3).result){ // y1 > y3
			s2_y1 = py3; s2_y3 = s1_y1;
			s2_x1 = px3; s2_x3 = s1_x1;
			s2_c1 = pc3; s2_c3 = s1_c1;
			s2_u1 = pu3; s2_u3 = s1_u1;
			s2_v1 = pv3; s2_v3 = s1_v1;
		}
		else{
			s2_y1 = s1_y1; s2_y3 = py3;
			s2_x1 = s1_x1; s2_x3 = px3;
			s2_c1 = s1_c1; s2_c3 = pc3;
			s2_u1 = s1_u1; s2_u3 = pu3;
			s2_v1 = s1_v1; s2_v3 = pv3;
		}

		sel sd_y1<11>, sd_x1<11>, sd_c1<24>, sd_u1<8>, sd_v1<8>;
		sel sd_y2<11>, sd_x2<11>, sd_c2<24>, sd_u2<8>, sd_v2<8>;
		sel sd_y3<11>, sd_x3<11>, sd_c3<24>, sd_u3<8>, sd_v3<8>;
		if(cmp23.gt(s1_y2, s2_y3).result){ // y2 > y3
			sd_y2 = s2_y3; sd_y3 = s1_y2;
			sd_x2 = s2_x3; sd_x3 = s1_x2;
			sd_c2 = s2_c3; sd_c3 = s1_c2;
			sd_u2 = s2_u3; sd_u3 = s1_u2;
			sd_v2 = s2_v3; sd_v3 = s1_v2;
		}
		else{
			sd_y2 = s1_y2; sd_y3 = s2_y3;
			sd_x2 = s1_x2; sd_x3 = s2_x3;
			sd_c2 = s1_c2; sd_c3 = s2_c3;
			sd_u2 = s1_u2; sd_u3 = s2_u3;
			sd_v2 = s1_v2; sd_v3 = s2_v3;
		}
		sd_y1 = s2_y1; sd_x1 = s2_x1; sd_c1 = s2_c1; sd_u1 = s2_u1; sd_v1 = s2_v1;

		x1 := sd_x1; y1 := sd_y1; b1 := sd_c1<23:16>; g1 := sd_c1<15:8>; r1 := sd_c1<7:0>; u1 := sd_u1; v1 := sd_v1;
		x2 := sd_x2; y2 := sd_y2; b2 := sd_c2<23:16>; g2 := sd_c2<15:8>; r2 := sd_c2<7:0>; u2 := sd_u2; v2 := sd_v2;
		x3 := sd_x3; y3 := sd_y3; b3 := sd_c3<23:16>; g3 := sd_c3<15:8>; r3 := sd_c3<7:0>; u3 := sd_u3; v3 := sd_v3;

		sy := sd_y1;
		ey := sd_y3;
	}

	if(0b0){
		cmp12.lt(0,0); cmp12.gte(0,0); cmp12.lte(0,0);
		cmp13.lt(0,0); cmp13.gte(0,0); cmp13.lte(0,0);
		cmp23.lt(0,0); cmp23.gte(0,0); cmp23.lte(0,0);
	}

// eval 640*480=0x4B000
//<18> NG
//<19> OK
	// eval マイナス:左凸, プラス:右凸
	eval := (mule1.con(y3-y1, x2-x1).dout - mule2.con(x3-x1, y2-y1).dout)<19>;
	// y2より上かどうか
	upper = ((y2-y)<10>==0b0) & (y1!=y2);

	reg_wr vram_write_wait, vram_read_wait;
	any{
		vram_write : par{
			vram_adrs_reg := vram_adrs;
			vram_write_data_reg := vram_write_data;
			vram_write_req();
			vram_write_wait := 0b1;
		}
		vram_read : par{
			vram_adrs_reg := vram_adrs;
			vram_read_req();
			vram_read_wait := 0b1;
		}
		else : par{
			vram_adrs = vram_adrs_reg;
			vram_write_data = vram_write_data_reg;
		}
	}
	if(vram_write_wait & ^vram_ack) vram_write_req();
	if(vram_read_wait & ^vram_ack) vram_read_req();
	if(vram_ack){
		vram_write_wait := 0b0;
		vram_read_wait := 0b0;
	//	vram_read_data_reg := vram_read_data;
	}

	if(f_dither){ // Dither tpage<9>==0b1
		sel d<4>;
		d = dither_table[y<2:1>||x<2:1>];
		sel dr<9>, dg<9>, db<9>;
		dr = (0b0||vr<CMULS+7:CMULS>) + 9#d;
		any{
			dr<8:7>==0b10 : out_R = 0xFF;
			dr<8:7>==0b11 : out_R = 0x00;
			else : out_R = dr<7:0>;
		}
		dg = (0b0||vg<CMULS+7:CMULS>) + 9#d;
		any{
			dg<8:7>==0b10 : out_G = 0xFF;
			dg<8:7>==0b11 : out_G = 0x00;
			else : out_G = dg<7:0>;
		}
		db = (0b0||vb<CMULS+7:CMULS>) + 9#d;
		any{
			db<8:7>==0b10 : out_B = 0xFF;
			db<8:7>==0b11 : out_B = 0x00;
			else : out_B = db<7:0>;
		}
	}
	else{
		if(f_texture){
			out_R = tr;
			out_G = tg;
			out_B = tb;
		}
		else{
			out_R = vr<CMULS+7:CMULS>;
			out_G = vg<CMULS+7:CMULS>;
			out_B = vb<CMULS+7:CMULS>;
		}
	}

	instruct delta_add par{
		if(sw_view_half){
	//	if(under640 & (x<0>==0b0)){
			x += 2;
			vr += dr << 1;
			vg += dg << 1;
			vb += db << 1;
			vu += du << 1;
			vv += dv << 1;
		}
		else{
			x++;
			vr += dr;
			vg += dg;
			vb += db;
			vu += du;
			vv += dv;
		}
	}

	stage draw_stg {
		sel under640;
		first_state st1;
		par{
			under640 = (x1-0b01010000000)<10>; // x < 640
			if(0b0){
				cmp_ex.gt(0,0); cmp_ex.lt(0,0); cmp_ex.lte(0,0);
				cmp_ey.gt(0,0); cmp_ey.lt(0,0); cmp_ey.lte(0,0);
				cmp_x.gt(0,0); cmp_x.lt(0,0); cmp_x.lte(0,0);
				cmp_y.gt(0,0); cmp_y.gte(0,0); cmp_y.lte(0,0);
				cmp_w.lt(0,0); cmp_w.gte(0,0); cmp_w.lte(0,0);
				cmp_h.lt(0,0); cmp_h.gte(0,0); cmp_h.lte(0,0);
			}
		}
		state st1 par{
			vertex_sort();
			generate bilinear_vbase.do();
			goto st2;
		}
		state st2 if(^bilinear_vbase.do){
			if(sy<10> & ey<10>){ // y < 0
				goto st1;
				finish;
			}
			else{
				generate bilinear_hbase.do();
				goto st3;
			}
			y := sy;
		}
		state st3 if(^bilinear_hbase.do){
			alt{
				y<10> // y < 0
				| cmp_y.lt(y, 0b0||drawY).result // y < drawY
				| (sw_view_half & (y<0>==0b1))
				: par{
					y++;
					generate bilinear_hbase.do();
				}
				//((y-ey)<10>==0b0) // y >= ey
				cmp_ey.gte(y, ey).result // y >= ey
				| cmp_h.gt(y, 0b0||drawH).result // y > drawH
				: par{ // end
					goto st1;
					finish;
				}
				else : par{ // y < ey
					goto st4;
				}
			}
			x := sx;
		}
		state st4 if((^vram_write_wait) & (^texdraw.do)){ // ライン描画
			if(
				//((x-ex)<10>==0b0) // x >= ex
				cmp_ex.gte(x, ex).result // x >= ex
				| cmp_w.gt(x, 0b0||drawW).result // x > drawW
				| (sx<10> & ex<10>)
			){
				y++;
				generate bilinear_hbase.do();
				goto st3;
			}
			else{ // x < ex
				if(
					(x<10>==0b0) // x >= 0
					& cmp_x.gte(x, 0b0||drawX).result // x >= drawX
				){
					any{
						f_texture : par{
						//	tcache.check(vv<16:9>||vu<16:9>);
							generate texdraw.do();
						}
/*
						f_semitrans : par{
							generate semidraw.do();
						}
*/
						else : par{
							if((x-0b01010000000)<10>){ // x < 640
								view_on(x<9:0>, y<8:0>);
							}
							else{
								vram_write(y<8:0>||x<9:0>, 0b0||vb<CMULS+7:CMULS+3>||vg<CMULS+7:CMULS+3>||vr<CMULS+7:CMULS+3>);
							}
							delta_add();
						}
					}
				}
				else{
					delta_add();
				}
/*
				// for 準備ポリゴン表示
				if(sw_outview_on
					& (x<10>==0b0) // x >= 0
					& ((x-0b01010000000)<10>==0b0) // x >= 640
				) view_on((x-640)<9:0>, y<8:0>);
*/
			}

		}
	}

	stage texdraw {
		sel clut_p<19>, tadjust_y<19>, tpage_col<2>;
		sel u<8>, v<8>;
		first_state st_init;
		par{
			sel clut_x<10>, clut_y<9>;
			clut_x = clut<5:0> || 0b0000;
			clut_y = clut<14:6>;
			clut_p = clut_y || clut_x;

			sel tbase_x<10>, tbase_y<9>;
			tbase_x = tpage<3:0> || 0b000000;
			tbase_y = tpage<4> || 0b00000000;
			tadjust_y = tbase_y || tbase_x;

			tpage_col = tpage<8:7>;

			u = vu<16:9>;
			v = vv<16:9>;
		}
		state st_init if(^vram_read_wait){
			any{
				tpage_col==0 : par{
					if(tcache.hit) goto st00_2;
					else{
						vram_read((0b0||v||10#0b0) + tadjust_y + ((13#0b0)||u<7:2>));
						goto st00_1;
					}
				}
				tpage_col==1 : par{
					if(tcache.hit) goto st00_2;
					else{
						vram_read((0b0||v||10#0b0) + tadjust_y + ((12#0b0)||u<7:1>));
						goto st01_1;
					}
				}
				tpage_col==2 : par{
					if(tcache.hit) goto st00_2;
					else{
						vram_read((0b0||v||10#0b0) + tadjust_y + ((11#0b0)||u));
						goto st00_2;
					}
				}
				else : par{
				//	delta_add();
					finish;
				}
			}
		}

		state st00_1 if(vram_ack){ //^vram_read_wait){
			sel tci<4>;
			tci = (vram_read_data >> (u<1:0>||0b00))<3:0>;
			vram_read(clut_p + ((15#0b0)||tci));
			goto st00_2;
		}
		state st01_1 if(vram_ack){ // ^vram_read_wait){
			sel tci<8>;
			tci = (vram_read_data >> (u<0>||0b000))<7:0>;
			vram_read(clut_p + ((11#0b0)||tci));
			goto st00_2;
		}

		state st00_2 if(vram_ack | tcache.hit){ // ^vram_read_wait){
			sel data<16>;
			if(tcache.hit) data = tcache.dout;
			else{
				data = vram_read_data;
			//	tcache.update(v||u, vram_read_data);
			}

			if((data<14:0>!=0) | (data==0x8000)){
				view_on(x<9:0>, y<8:0>);
				tr = data< 4: 0> || 0b000;
				tg = data< 9: 5> || 0b000;
				tb = data<14:10> || 0b000;
			}

			delta_add();
			goto st_init;
			finish;
		}
	}
/*
	stage semidraw {
		first_state st1;
		state st1 par{
			read_view(x<9:0>, y<8:0>);
			goto st2;
		}
		state st2 par{
			pre_r = in_R;
			pre_g = in_G;
			pre_b = in_B;
			view_on(x<9:0>, y<8:0>);
			delta_add();
			goto st1;
			finish;
		}
	}
*/
	reg_wr x12<26>, x13<26>, x23<26>;
	reg_wr dx12<26>, dx13<26>, dx23<26>;
	reg_wr r12<8+CMULS>, g12<8+CMULS>, b12<8+CMULS>;
	reg_wr r13<8+CMULS>, g13<8+CMULS>, b13<8+CMULS>;
	reg_wr r23<8+CMULS>, g23<8+CMULS>, b23<8+CMULS>;
	reg_wr dr12<8+CMULS>, dg12<8+CMULS>, db12<8+CMULS>;
	reg_wr dr13<8+CMULS>, dg13<8+CMULS>, db13<8+CMULS>;
	reg_wr dr23<8+CMULS>, dg23<8+CMULS>, db23<8+CMULS>;
	reg_wr u12<8+TMULS>, v12<8+TMULS>;
	reg_wr u13<8+TMULS>, v13<8+TMULS>;
	reg_wr u23<8+TMULS>, v23<8+TMULS>;
	reg_wr du12<8+TMULS>, dv12<8+TMULS>;
	reg_wr du13<8+TMULS>, dv13<8+TMULS>;
	reg_wr du23<8+TMULS>, dv23<8+TMULS>;

	stage bilinear_vbase {
		mul_s26s16 mulx;
		first_state st1;
		state st1 par{
			inv_t.read((y2-y1)<9:0>);
			goto st_a12;
		}
		state st_a12 par{
			// (<11>||<15>)*<u16> = <42>
			dx12 := mulx.con((x2-x1)||15#0b0, inv_t.dout).dout<40:15>;
			// 0b0||<8>||<CMULS> * <16> = <33>
			dr12 := mulcr.con(((0b0||r2)-(0b0||r1))||CMULS#0b0, inv_t.dout).dout<8+CMULS+14:15>;
			dg12 := mulcg.con(((0b0||g2)-(0b0||g1))||CMULS#0b0, inv_t.dout).dout<8+CMULS+14:15>;
			db12 := mulcb.con(((0b0||b2)-(0b0||b1))||CMULS#0b0, inv_t.dout).dout<8+CMULS+14:15>;
			// 0b0||<8>||<TMULS> * <16> = <33>
			du12 := multu.con(((0b0||u2)-(0b0||u1))||TMULS#0b0, inv_t.dout).dout<8+TMULS+14:15>;
			dv12 := multv.con(((0b0||v2)-(0b0||v1))||TMULS#0b0, inv_t.dout).dout<8+TMULS+14:15>;

			inv_t.read((y3-y1)<9:0>);
			goto st_a13;
		}
		state st_a13 par{
			dx13 := mulx.con((x3-x1)||15#0b0, inv_t.dout).dout<40:15>;
			dr13 := mulcr.con(((0b0||r3)-(0b0||r1))||CMULS#0b0, inv_t.dout).dout<8+CMULS+14:15>;
			dg13 := mulcg.con(((0b0||g3)-(0b0||g1))||CMULS#0b0, inv_t.dout).dout<8+CMULS+14:15>;
			db13 := mulcb.con(((0b0||b3)-(0b0||b1))||CMULS#0b0, inv_t.dout).dout<8+CMULS+14:15>;
			du13 := multu.con(((0b0||u3)-(0b0||u1))||TMULS#0b0, inv_t.dout).dout<8+TMULS+14:15>;
			dv13 := multv.con(((0b0||v3)-(0b0||v1))||TMULS#0b0, inv_t.dout).dout<8+TMULS+14:15>;

			inv_t.read((y3-y2)<9:0>);
			goto st_a23;
		}
		state st_a23 par{
			dx23 := mulx.con((x3-x2)||15#0b0, inv_t.dout).dout<40:15>;
			dr23 := mulcr.con(((0b0||r3)-(0b0||r2))||CMULS#0b0, inv_t.dout).dout<8+CMULS+14:15>;
			dg23 := mulcg.con(((0b0||g3)-(0b0||g2))||CMULS#0b0, inv_t.dout).dout<8+CMULS+14:15>;
			db23 := mulcb.con(((0b0||b3)-(0b0||b2))||CMULS#0b0, inv_t.dout).dout<8+CMULS+14:15>;
			du23 := multu.con(((0b0||u3)-(0b0||u2))||TMULS#0b0, inv_t.dout).dout<8+TMULS+14:15>;
			dv23 := multv.con(((0b0||v3)-(0b0||v2))||TMULS#0b0, inv_t.dout).dout<8+TMULS+14:15>;

			x12 := x1 || 15#0b0;
			x13 := x1 || 15#0b0;
			x23 := x2 || 15#0b0;

			r12 := r1 || CMULS#0b0;
			g12 := g1 || CMULS#0b0;
			b12 := b1 || CMULS#0b0;
			r13 := r1 || CMULS#0b0;
			g13 := g1 || CMULS#0b0;
			b13 := b1 || CMULS#0b0;
			r23 := r2 || CMULS#0b0;
			g23 := g2 || CMULS#0b0;
			b23 := b2 || CMULS#0b0;

			u12 := u1 || TMULS#0b0;
			v12 := v1 || TMULS#0b0;
			u13 := u1 || TMULS#0b0;
			v13 := v1 || TMULS#0b0;
			u23 := u2 || TMULS#0b0;
			v23 := v2 || TMULS#0b0;

			goto st1;
			finish;
		}
	}

	stage bilinear_hbase {
		first_state st1;
		state st1 par{
			sel s<11>, e<11>;
			if(eval){ // 左に凸
				if(upper){ // 上
					s = x12<25:15>;
				}
				else{ // 下
					s = x23<25:15>;
				}
				e = x13<25:15>;
			}
			else{ // 右に凸
				s = x13<25:15>;
				if(upper){ // 上
					e = x12<25:15>;
				}
				else{ // 下
					e = x23<25:15>;
				}
			}

			if((e-s)<10>){ // sx > ex
				sx := 640;
				ex := 640;
				finish;
			}
			else{
				sx := s;
				ex := e;
				goto st_ac;
			}

			inv_t.read((e-s)<9:0>);
		}
		state st_ac par{
			sel sr<8>, sg<8>, sb<8>, su<8>, sv<8>;
			sel er<8>, eg<8>, eb<8>, eu<8>, ev<8>;
			if(eval){ // 左に凸
				if(upper){ // 上
					sr = r12<CMULS+7:CMULS>; sg = g12<CMULS+7:CMULS>; sb = b12<CMULS+7:CMULS>;
					su = u12<TMULS+7:TMULS>; sv = v12<TMULS+7:TMULS>;
				}
				else{ // 下
					sr = r23<CMULS+7:CMULS>; sg = g23<CMULS+7:CMULS>; sb = b23<CMULS+7:CMULS>;
					su = u23<TMULS+7:TMULS>; sv = v23<TMULS+7:TMULS>;
				}
				er = r13<CMULS+7:CMULS>; eg = g13<CMULS+7:CMULS>; eb = b13<CMULS+7:CMULS>;
				eu = u13<TMULS+7:TMULS>; ev = v13<TMULS+7:TMULS>;
			}
			else{ // 右に凸
				sr = r13<CMULS+7:CMULS>; sg = g13<CMULS+7:CMULS>; sb = b13<CMULS+7:CMULS>;
				su = u13<TMULS+7:TMULS>; sv = v13<TMULS+7:TMULS>;
				if(upper){ // 上
					er = r12<CMULS+7:CMULS>; eg = g12<CMULS+7:CMULS>; eb = b12<CMULS+7:CMULS>;
					eu = u12<TMULS+7:TMULS>; ev = v12<TMULS+7:TMULS>;
				}
				else{ // 下
					er = r23<CMULS+7:CMULS>; eg = g23<CMULS+7:CMULS>; eb = b23<CMULS+7:CMULS>;
					eu = u23<TMULS+7:TMULS>; ev = v23<TMULS+7:TMULS>;
				}
			}

			dr := mulcr.con(((0b0||er)-(0b0||sr))||CMULS#0b0, inv_t.dout).dout<8+CMULS+14:15>;
			dg := mulcg.con(((0b0||eg)-(0b0||sg))||CMULS#0b0, inv_t.dout).dout<8+CMULS+14:15>;
			db := mulcb.con(((0b0||eb)-(0b0||sb))||CMULS#0b0, inv_t.dout).dout<8+CMULS+14:15>;

			du := multu.con(((0b0||eu)-(0b0||su))||TMULS#0b0, inv_t.dout).dout<8+TMULS+14:15>;
			dv := multv.con(((0b0||ev)-(0b0||sv))||TMULS#0b0, inv_t.dout).dout<8+TMULS+14:15>;

			vr := sr || CMULS#0b0;
			vg := sg || CMULS#0b0;
			vb := sb || CMULS#0b0;

			vu := su || TMULS#0b0;
			vv := sv || TMULS#0b0;

			if(upper){ // 上
				x12 += dx12;
				r12 += dr12;
				g12 += dg12;
				b12 += db12;
				u12 += du12;
				v12 += dv12;
			}
			else{
				x23 += dx23;
				r23 += dr23;
				g23 += dg23;
				b23 += db23;
				u23 += du23;
				v23 += dv23;
			}
			x13 += dx13;
			r13 += dr13;
			g13 += dg13;
			b13 += db13;
			u13 += du13;
			v13 += dv13;
			goto st1;
			finish;
		}
	}

}
