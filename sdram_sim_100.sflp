
/*
	DE2-115 SDRAM Controller 2019/03/05

	8M Words x 16 bits x 4 Banks (64MB) × 2個

	clock 100 MHz
		bank<2> adrs<23> data<32>
*/

circuit sdram_sim_100
{
	instrin write(adrs, wdata, enable);
	input wdata<32>, adrs<25>, enable<4>;
	instrin read(adrs);
	output rdata<32>, ack;

	reg_wr adrs_reg<25>, rdata_reg<32>, wdata_reg<32>;
	reg_wr mask_reg<4>;

	mem cells[33554432]<32>;

	reg_ws reset;

	stage_name refresh { task do(); }
	stage_name refresh_cnt { task do(); }
	stage_name write_stg { task do(adrs_reg, wdata_reg); }
	stage_name read_stg { task do(adrs_reg); }

	if(reset){
		reset := 0b0;
		generate refresh_cnt.do();
	}

	ack = ^(read_stg.do | write_stg.do);

	rdata = rdata_reg;

	instruct read par{
	//	mask_reg := 0b0000;
		generate read_stg.do(adrs);
	}

	instruct write par{
		mask_reg := ^enable;
		generate write_stg.do(adrs, wdata);
	}

	// 4 clk -> 2
	stage write_stg {
		reg_wr temp_data<32>;
		first_state st_ACT;
		state st_ACT if(^refresh.do){
		//	com_ACT();
		//	BA_reg := adrs_reg<24:23>;
		//	A_reg := adrs_reg<22:10>;
		//	Dout_reg := wdata_reg;
		//	DQM_reg := mask_reg;
			temp_data := cells[adrs_reg];
		//	goto st_wACT;
			goto st_w1;
		}
/*
		state st_wACT par{
		//	com_NOP();
			goto st_WRITEA;
		}
		state st_WRITEA par{
		//	com_WRITE();
			goto st_w1;
		}
*/
		state st_w1 par{
		//	com_NOP();
			sel d0<8>, d1<8>, d2<8>, d3<8>;
			if(mask_reg<0>) d0=temp_data< 7: 0>; else d0=wdata_reg< 7: 0>;
			if(mask_reg<1>) d1=temp_data<15: 8>; else d0=wdata_reg<15: 8>;
			if(mask_reg<2>) d2=temp_data<23:16>; else d0=wdata_reg<23:16>;
			if(mask_reg<3>) d3=temp_data<31:24>; else d0=wdata_reg<31:24>;
			cells[adrs_reg] := d3||d2||d1||d0;
			goto st_ACT;
			finish;
		}
	}

	// 6 clk -> 3
	stage read_stg {
		first_state st_ACT;
		state st_ACT if(^refresh.do){
		//	com_ACT();
			goto st_wACT;
		}
		state st_wACT par{
		//	com_NOP();
		//	goto st_READA;
			goto st_w2;
		}
/*
		state st_READA par{
		//	com_READ();
			goto st_w0;
		}
		state st_w0 par{
		//	com_NOP();
			goto st_w1;
		}
		state st_w1 par{
			goto st_w2;
		}
*/
		state st_w2 par{ // CL 2
			rdata_reg := cells[adrs_reg];
			goto st_ACT;
			finish;
		}
	}

	// 8192 refresh cycles every 64ms (50MHzで3,200,000clk)
	// 390clkごとに1リフレッシュ
	stage refresh_cnt {
		reg_wr refresh_time<8>; // 256
/*
	// 8192 refresh cycles every 64ms (100MHzで6,400,000clk)
	// 781clkごとに1リフレッシュ
	stage refresh_cnt {
		reg_wr refresh_time<9>; // 512
*/
		first_state st1;
		if(0b0) finish;
		state st1 if(^refresh.do){
			refresh_time++;
			if(/&refresh_time) goto st2;
		}
		state st2 if(^(read_stg.do | write_stg.do)){
			generate refresh.do();
			goto st1;
		}
	}

	// 5 clk
	// read or write と refresh が同時に起動しても refresh を優先
	stage refresh {
		reg_wr refresh_A<15>;
		first_state st_ACT;
		state st_ACT par{
		//	com_ACT();
		//	BA_reg := refresh_A<1:0>;
		//	A_reg := refresh_A<14:2>;
		//	DQM_reg := 0b1111;
		//	goto st_wACT;
			goto stw;
		}
/*
		state st_wACT par{
		//	com_NOP();
			goto st_PRE;
		}
		state st_PRE par{
		//	com_PRE();
		//	A_reg := 0b0010000000000;
			refresh_A++;
			goto st_wPRE;
		}
		state st_wPRE par{
		//	com_NOP();
			goto stw;
		}
*/
		state stw par{
			goto st_ACT;
			finish;
		}
	}

}
