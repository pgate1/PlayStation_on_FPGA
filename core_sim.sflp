
/*
	PSX on FPGA feat. DE2-115
	Copyright (c)2016 pgate1
*/

%i "sram_sim.h"
%i "sdram_sim_100.h"

%i "PSX_core.h"
%i "VGA_ctrl.h"
%i "view_ram_ctrl.h"

circuit core_sim
{
//--------------------- SRAM Interface ---------------------
	sram_sim sram;
//--------------------- SDRAM Interface --------------------
	sdram_sim_100 sdram;
//--------------------- VGA --------------------------------
	VGA_ctrl vga;
	output VGA_BLANKn, VGA_HS, VGA_VS;
	output VGA_R<8>, VGA_G<8>, VGA_B<8>;
	reg_wr clock25M_div;
//--------------------- Audio ------------------------
	output out_L<32>, out_R<32>;

	output pc_out<32>;
	output disp_out;

	reg_ws reset;

	PSX_core psx;

	reg_wr exe_read_ok;
	reg_wr chksum<8>;

	reg_wr tA<21>; // 2MB
	reg_wr d0<8>, d1<8>, d2<8>;

	view_ram_ctrl view_ram;

	instrself halt(halt_sel);
	sel halt_sel<8>;
	reg_wr halt_code<8>;

	stage_name flash2ram_bios { task do(); }
	stage_name wram_clear { task do(); }
	stage_name sram_clear { task do(); }

	stage_name spu_wait_ack { task do(); }
	stage_name gpu_wait_ack { task do(); }

	if(reset){
		reset := 0b0;
		generate wram_clear.do();
	}

	instruct halt halt_code := halt_sel;

	out_L = psx.voice_L || 0b00000000000;
	out_R = psx.voice_R || 0b00000000000;

	clock25M_div := ^clock25M_div;
	if(clock25M_div) vga.htiming();
	VGA_BLANKn = vga.en;
	VGA_HS = vga.h_sync;
	VGA_VS = vga.v_sync;
	VGA_R = vga.oR;
	VGA_G = vga.oG;
	VGA_B = vga.oB;

	instruct psx.view_on par{
		view_ram.write(psx.view_x<9:1>, psx.view_y<8:1>,
			psx.view_R<7:3>, psx.view_G<7:3>, psx.view_B<7:3>);
	}
	instruct vga.view view_ram.read();
	instruct vga.vblank_begin par{
		psx.vblank_in();
		view_ram.adrs_reset();
		if(^psx.gpu_chain_do) view_ram.bank_change(); // 320x240で60fpsOK
	}

	if(exe_read_ok & ^/|halt_code) psx.run();

	// ubs.button1<12> : B,Y,Sl,St, Up,Dn,Le,Ri, A,X,L,R
	// PS : □,×,○,△,R,L,0,0,←,↓,→,↑,St,0,0,Sl
	psx.key_in = 0;

//	psx.sw_intpl_off();
//	if(SW<15>) psx.sw_reverb_off();
//	if(SW<16>) 
psx.sw_spu_off();
//psx.sw_cache_off();
psx.sw_kernel_run();
//psx.dbg_in = SW<15:0>;

/*
	any{
		soundexe_read.do : seg = 0x0000||tA<20:5>;
		key3 : seg = chksum || psx.dbg_cpu || 0x00 || psx.halt_code;
		key2 : seg = psx.dbg;
		key1 : seg = 0x000000 || halt_code;//psx.dbg2;
		else : seg = psx.pc_out;
	}
*/
	pc_out = psx.pc_out;

	disp_out = /|psx.disp_env;
	//LEDR = (0b00000000000000000 || /|psx.halt_code) | psx.disp_env<23:6> | (0b00||psx.key_in);

	instruct psx.WRAM_READ par{
		sdram.read(0b000000||psx.A<20:2>);
	}
	if(sdram.ack) psx.wram_ack();

	instruct psx.WRAM_WRITE par{
		any{
			psx.Word==4 : sdram.write(0b000000||psx.A<20:2>, psx.Dout, 0b1111);
			psx.Word==2 : any{
				psx.A<1>==0b0 : sdram.write(0b000000||psx.A<20:2>, 0x0000||psx.Dout<15:0>, 0b0011);
				psx.A<1>==0b1 : sdram.write(0b000000||psx.A<20:2>, psx.Dout<15:0>||0x0000, 0b1100);
			}
			psx.Word==1 : any{
				psx.A<1:0>==0b00 : sdram.write(0b000000||psx.A<20:2>, 0x000000||psx.Dout<7:0>,     0b0001);
				psx.A<1:0>==0b01 : sdram.write(0b000000||psx.A<20:2>, 0x0000||psx.Dout<7:0>||0x00, 0b0010);
				psx.A<1:0>==0b10 : sdram.write(0b000000||psx.A<20:2>, 0x00||psx.Dout<7:0>||0x0000, 0b0100);
				psx.A<1:0>==0b11 : sdram.write(0b000000||psx.A<20:2>, psx.Dout<7:0>||0x000000,     0b1000);
			}
		}
	}

	instruct psx.BIOS_READ par{
		sdram.read(0b10000000||psx.A<18:2>);
	}
	psx.Din = sdram.rdata;
	if(sdram.ack) psx.bios_ack();

	// 描画中はCPU停止の為、とりあえずGPUの方を優先する
// GPUテストの為、とりあえずSPUをオミットする
	alt{
		gpu_wait_ack.do | spu_wait_ack.do : ;

		psx.spu_mem_read_req & ^psx.sw_spu_off : par{
			sram.read(0b00||psx.spu_mem_A);
			generate spu_wait_ack.do();
		}

		psx.vram_write_req : par{
			sram.write(0b1||psx.vram_write_adrs, psx.vram_write_data, 0b11);
			generate gpu_wait_ack.do();
		}

		psx.vram_read_req : par{
			sram.read(0b1||psx.vram_read_adrs);
			generate gpu_wait_ack.do();
		}

		psx.spu_mem_write_req & ^psx.sw_spu_off : par{
			sram.write(0b00||psx.spu_mem_A, psx.spu_mem_Din, 0b11);
			generate spu_wait_ack.do();
		}

	}
	psx.spu_mem_Dout = sram.rdata;
	psx.vram_read_data = sram.rdata;

	if(psx.sw_spu_off) psx.spu_mem_ack();

	stage gpu_wait_ack {
		if(sram.ack){
			psx.vram_ack();
			finish;
		}
	}

	stage spu_wait_ack {
		if(sram.ack){
			psx.spu_mem_ack();
			finish;
		}
	}
/*
	stage flash2ram_bios {
		reg_wr bA<19>; // 512KB
		first_state st_open;
		state st_open par{
			bA := 0;
		//	chksum := 0x00;
			goto st_read;
		}
		state st_read if(flash.ack){
			flash.read(0b0000||bA);
			goto st_write;
		}
		state st_write if(flash.ack & sdram_ack){
			switch(bA<1:0>){ // ok
				case 0b00: d0 := flash.rdata;
				case 0b01: d1 := flash.rdata;
				case 0b10: d2 := flash.rdata;
				case 0b11: sdram_write(0b10000000||bA<18:2>, flash.rdata||d2||d1||d0, 0b1111);
			}
			bA++;
		//	chksum += flash.rdata;
			if(/&bA) goto st_end;
			else goto st_read;
		}
		state st_end if(sdram_ack){
			generate wram_clear.do();
			finish;
		}
	}
*/
	stage wram_clear {
		reg_wr wA<19>;
		first_state sst;
		state sst par{
			wA := 0; // kernel領域もクリアしておく
		//	wA := 0b000||0x4000; // kernelはflashから
			goto st1;
		}
		state st1 if(sdram.ack){
			sdram.write(0b000000||wA, 0x00000000, 0b1111);
			wA++;
			if(/&wA) goto st2;
		}
		state st2 if(sdram.ack){
			if(psx.sw_kernel_run){ // for BIOS
				generate sram_clear.do();
			}
			finish;
		}
	}

	stage sram_clear {
		reg_wr sA<18>; // 256kW(512kB)
		reg_wr vA<19>; // 512kW(1MB)
		first_state sst;
		state sst par{
			sA := 0;
			goto st1;
		}
		state st1 if(sram.ack){
			sram.write(0b00||sA, 0x0000, 0b11);
			sA++;
			if(/&sA){
				if(psx.sw_kernel_run) goto st2;
				else goto st3;
			}
		}
		state st2 if(sram.ack){
			sram.write(0b1||vA, 0x0000, 0b11);
			vA++;
			if(/&vA) goto st3;
		}
		state st3 if(sram.ack){
			exe_read_ok := 0b1;
			finish;
		}
	}

}
