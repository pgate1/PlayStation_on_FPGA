/*
	GPU draw Rect
		by pgate1
*/

declare compare_s11 interface
{
	input a<11>, b<11>;
	instrin gt, lt, gte, lte;
	output result;
	instr_arg gt(a, b);
	instr_arg lt(a, b);
	instr_arg gte(a, b);
	instr_arg lte(a, b);
}

circuit drawRect
{
	input vx1<11>, vy1<11>;
	input vx4<11>, vy4<11>;
	input col<24>;
	input clut<16>, tpage<14>;
	input vu1<8>, vv1<8>;
	input vu4<8>, vv4<8>;
	input drawX<10>, drawY<10>, drawW<10>, drawH<10>;
	instrin con(vx1, vy1, vx4, vy4, col, clut, tpage, vu1, vv1, vu4, vv4, drawX, drawY, drawW, drawH);

	instrin sw_view_half_width, sw_view_half_height;

	instrin draw;
	output drawing;

	compare_s11 cmp_w, cmp_h;

	reg_wr pu<8>, pv<8>;

	reg_wr tx<11>, u<8>;

	input f_texture;
	input f_texblend;
	input f_semitrans;

	// VIEW
	output view_x<10>, view_y<9>;
	instrout view_on(view_x, view_y);
	output out_R<8>, out_G<8>, out_B<8>;

	// VRAM
	output vram_read_adrs<19>;
	reg_wr vram_read_adrs_reg<19>;
	instrself vram_read(vram_read_adrs);
	instrout vram_read_req;
	instrin vram_ack;
	input vram_read_data<16>;
//	reg_wr vram_read_data_reg<16>;

	reg_wr halt;

	stage_name draw_stg { task do(); }
	stage_name bilinear_vbase { task do(); }
	stage_name texdraw { task do(tx, u); }

	instruct draw generate draw_stg.do();
	drawing = draw_stg.do;

	reg_wr vram_read_wait;
	if(vram_read){
		vram_read_adrs_reg := vram_read_adrs;
		vram_read_req();
		vram_read_wait := 0b1;
	}
	else{
		vram_read_adrs = vram_read_adrs_reg;
	}
	if(vram_read_wait & ^vram_ack) vram_read_req();
	if(vram_ack){
		vram_read_wait := 0b0;
	//	vram_read_data_reg := vram_read_data;
	}

	sel tr<8>, tg<8>, tb<8>;
	if(f_texture){
		out_R = tr;
		out_G = tg;
		out_B = tb;
	}
	else{
		out_R = col<7:0>;
		out_G = col<15:8>;
		out_B = col<23:16>;
	}

	stage draw_stg {
		reg_wr x<11>, y<11>;
		first_state st1;
		par{
			if(0b0){
				cmp_w.lt(0,0); cmp_w.gte(0,0); cmp_w.lte(0,0);
				cmp_h.lt(0,0); cmp_h.gte(0,0); cmp_h.lte(0,0);
			}
		}
		state st1 par{
			if((vy1<10> & vy4<10>) | (vx1<10> & vx4<10>)){ // y < 0, x < 0
				finish;
			}
			else goto st3;
			y := vy1;
			pv := vv1;
		}
		state st3 par{
			alt{
				y<10> // y < 0
				| ((y-(0b0||drawY))<10>==0b1) // y < drawY ドローライン未満
				: par{
					y++;
					pv++;
				}
				((y-vy4)<10>==0b0) // y >= ey
				| cmp_h.gt(y, 0b0||drawH).result : par{ // y > drawH ドローライン超え
					goto st1;
					finish;
				}
				else : par{ // y < ey 描画ライン
					goto st4;
				}
			}
			x := vx1;
			pu := vu1;
		}
		state st4 if(^texdraw.do){
			if(
			//	((vx4-x)<10>==0b1) // x > ex
				((x-vx4)<10>==0b0) // x >= ex
				| cmp_w.gt(x, 0b0||drawW).result // x > drawW ドロードット超え
			){
				if(sw_view_half_height){
					y += 2;
					pv += 2;
				}
				else{
					y++;
					pv++;
				}
				goto st3;
			}
			else{ // x < ex
				if(
				//	(y<10>==0b0)          // y >= 0
				//	& (y-0b00111100000)<10> // y < 480
					(x<10>==0b0)          // x >= 0
				//	& (x-0b01010000000)<10> // x < 640
					& ((x-(0b0||drawX))<10>==0b0) // x >= drawX // ドロードット以上
				){
					any{
						f_texture : generate texdraw.do(x, pu);
						else : par{
							view_on(x<9:0>, y<8:0>);
						}
					}
				}
			}

			if(sw_view_half_width){
				x += 2;
				pu += 2;
			}
			else{
				x++;
				pu++;
			}
		}
	}

	stage texdraw {
		sel clut_p<19>, tadjust_y<19>, tpage_col<2>;
		sel v<8>;
		reg_wr f_tci_buf_on;
		first_state st_init;
		par{
			sel clut_x<10>, clut_y<9>;
			clut_x = clut<5:0> || 0b0000;
			clut_y = clut<14:6>;
			clut_p = clut_y || clut_x;

			sel tbase_x<10>, tbase_y<9>;
			tbase_x = tpage<3:0> || 0b000000;
			tbase_y = tpage<4> || 0b00000000;
			tadjust_y = tbase_y || tbase_x;

			tpage_col = tpage<8:7>;

			v = pv;
		}
		state st_init if(^vram_read_wait){
			any{
				tpage_col==0 : par{
					reg_wr u_buf<6>;
					if(u<7:2>==u_buf){
						f_tci_buf_on := 0b1;
					}
					else{
						vram_read((0b0||v||10#0b0) + tadjust_y + ((13#0b0)||u<7:2>));
						f_tci_buf_on := 0b0;
					}
					u_buf := u<7:2>;
					goto st00_1;
				}
				tpage_col==1 : par{
					reg_wr u_buf<7>;
					if(u<7:1>==u_buf){
						f_tci_buf_on := 0b1;
					}
					else{
						vram_read((0b0||v||10#0b0) + tadjust_y + ((12#0b0)||u<7:1>));
						f_tci_buf_on := 0b0;
					}
					u_buf := u<7:1>;
					goto st01_1;
				}
				tpage_col==2 : par{
					vram_read((0b0||v||10#0b0) + tadjust_y + ((11#0b0)||u));
					goto st00_2;
				}
				else : finish;
			}
		}

		state st00_1 if(vram_ack | f_tci_buf_on){ // ^vram_read_wait){
			sel tci<4>;
			reg_wr vram_read_data_buf<16>;
			if(f_tci_buf_on){
				tci = (vram_read_data_buf >> (u<1:0>||0b00))<3:0>;
			}
			else{
				tci = (vram_read_data >> (u<1:0>||0b00))<3:0>;
				vram_read_data_buf := vram_read_data;
			}
			vram_read(clut_p + ((15#0b0)||tci));
			goto st00_2;
		}

		state st01_1 if(vram_ack | f_tci_buf_on){ // ^vram_read_wait){
			sel tci<8>;
			reg_wr vram_read_data_buf<16>;
			if(f_tci_buf_on){
				tci = (vram_read_data_buf >> (u<0>||0b000))<7:0>;
			}
			else{
				tci = (vram_read_data >> (u<0>||0b000))<7:0>;
				vram_read_data_buf := vram_read_data;
			}
			vram_read(clut_p + ((11#0b0)||tci));
			goto st00_2;
		}

		state st00_2 if(vram_ack){ // ^vram_read_wait){
			if((vram_read_data<14:0>!=0) | (vram_read_data==0x8000)){
				view_on(tx<9:0>, y<8:0>);
				tr = vram_read_data< 4: 0> || 0b000;
				tg = vram_read_data< 9: 5> || 0b000;
				tb = vram_read_data<14:10> || 0b000;
			}
			goto st_init;
			finish;
		}
	}

}
