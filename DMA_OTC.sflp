/*
	DMA for OTC
		by pgate1
*/

circuit DMA_OTC
{
	input DmaMADR_6<32>, DmaBCR_6<32>;

	output A<21>, D<32>;
	instrout wram_write(A, D);

	instrin Execute;
	instrin wram_ack;
	output running;

	instrin run33;
	reg_wr int_wait_max<32>, count_rst;
	instrout interrupt;
	output int_waiting;

	instrself halt(h_code);
	sel h_code<8>;
	reg_wr h_code_reg<8>;
	output halt_code<8>;

output dbg<32>;
//reg_wr count<16>;
//input dbg_in<16>;

	stage_name run_dma { task do(); }
	stage_name int_wait { task do(int_wait_max, count_rst); }

	running = 
	//	Execute |
		run_dma.do;

	instruct halt h_code_reg := h_code;
	halt_code = h_code_reg;

//dbg = 0x0000||count;

	instruct Execute par{
//if(int_wait.do) halt(0xB1);
//if(run_dma.do) halt(0xB2);
		generate run_dma.do();
	}

	int_waiting = int_wait.do;

	stage run_dma {
		reg_wr bcr<32>, madr<21>;
		first_state st1;
		state st1 par{
			madr := DmaMADR_6<20:0>;
			bcr := DmaBCR_6;
			if(DmaBCR_6==0) goto st3;
			else goto st2;
		}
		state st2 if(wram_ack){
			wram_write(madr, 0x00||((0b000||madr)-4));
			madr -= 4;
			bcr--;
			if(bcr==1) goto st3;
		}
		state st3 if(wram_ack){
			wram_write(madr+4, 0x00FFFFFF);
			goto st4;
		}
		state st4 if(wram_ack){
//if(DmaBCR_6<31>) halt(0x48);
			generate int_wait.do(4/*DmaBCR_6*/, 0b1);
			goto st1;
			finish;
		}
	}

	stage int_wait {
		reg_wr int_wait_count<32>;
		first_state st1;
		state st1 par{
			int_wait_count := 0;
			count_rst := 0b0;
			goto st2;
		}
		state st2 if(run33){
			int_wait_count++;
			if(int_wait_count==int_wait_max){
				interrupt();
				goto st1;
				finish;
			}
			if(count_rst) goto st1;
		}
	}

}
